---
import BaseLayout from '../../layouts/BaseLayout.astro';
import DashboardLayout from '../../layouts/DashboardLayout.astro';
import Card from '../../components/ui/Card.astro';
import Button from '../../components/ui/Button.astro';
---

<BaseLayout title="Quản lý khách hàng - ComputerPOS Pro">
  <DashboardLayout>
    <main class="p-6 space-y-6">
      <!-- Header -->
      <div class="flex justify-between items-center">
        <div>
          <h1 class="text-3xl font-bold text-gray-900">Quản lý khách hàng</h1>
          <p class="text-gray-600 mt-1">Quản lý thông tin khách hàng và lịch sử mua hàng</p>
        </div>
        <div class="flex space-x-3">
          <Button variant="secondary" id="export-customers-btn">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            Xuất danh sách
          </Button>
          <Button variant="secondary" id="import-customers-btn">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10" />
            </svg>
            Import khách hàng
          </Button>
          <Button variant="primary" id="add-customer-btn">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
            </svg>
            Thêm khách hàng
          </Button>
        </div>
      </div>

      <!-- Stats Cards -->
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card>
          <div class="p-6">
            <div class="flex items-center">
              <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mr-3">
                <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                </svg>
              </div>
              <div>
                <p class="text-sm font-medium text-gray-600">Tổng khách hàng</p>
                <p class="text-2xl font-bold text-gray-900" id="total-customers">0</p>
              </div>
            </div>
          </div>
        </Card>

        <Card>
          <div class="p-6">
            <div class="flex items-center">
              <div class="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center mr-3">
                <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <div>
                <p class="text-sm font-medium text-gray-600">Khách hàng VIP</p>
                <p class="text-2xl font-bold text-gray-900" id="vip-customers">0</p>
              </div>
            </div>
          </div>
        </Card>

        <Card>
          <div class="p-6">
            <div class="flex items-center">
              <div class="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center mr-3">
                <svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
                </svg>
              </div>
              <div>
                <p class="text-sm font-medium text-gray-600">Doanh thu tháng</p>
                <p class="text-2xl font-bold text-gray-900" id="monthly-revenue">0đ</p>
              </div>
            </div>
          </div>
        </Card>

        <Card>
          <div class="p-6">
            <div class="flex items-center">
              <div class="w-8 h-8 bg-orange-100 rounded-full flex items-center justify-center mr-3">
                <svg class="w-5 h-5 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l-1 10H6L5 9z" />
                </svg>
              </div>
              <div>
                <p class="text-sm font-medium text-gray-600">Đơn hàng tháng</p>
                <p class="text-2xl font-bold text-gray-900" id="monthly-orders">0</p>
              </div>
            </div>
          </div>
        </Card>
      </div>

      <!-- Filters and Search -->
      <Card>
        <div class="p-6">
          <div class="grid grid-cols-1 md:grid-cols-5 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Tìm kiếm</label>
              <input 
                type="text" 
                id="search-input"
                class="form-input w-full"
                placeholder="Tên, email, SĐT..."
              />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Loại khách hàng</label>
              <select id="type-filter" class="form-select w-full">
                <option value="">Tất cả loại</option>
                <option value="individual">Cá nhân</option>
                <option value="business">Doanh nghiệp</option>
                <option value="vip">VIP</option>
                <option value="wholesale">Khách sỉ</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Trạng thái</label>
              <select id="status-filter" class="form-select w-full">
                <option value="">Tất cả trạng thái</option>
                <option value="active">Hoạt động</option>
                <option value="inactive">Không hoạt động</option>
                <option value="blacklisted">Danh sách đen</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Khu vực</label>
              <select id="region-filter" class="form-select w-full">
                <option value="">Tất cả khu vực</option>
                <option value="hanoi">Hà Nội</option>
                <option value="hcm">TP. Hồ Chí Minh</option>
                <option value="danang">Đà Nẵng</option>
                <option value="other">Khác</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Sắp xếp theo</label>
              <select id="sort-filter" class="form-select w-full">
                <option value="name">Tên A-Z</option>
                <option value="created_at">Ngày tạo</option>
                <option value="total_orders">Số đơn hàng</option>
                <option value="total_spent">Tổng chi tiêu</option>
                <option value="last_order">Mua hàng gần đây</option>
              </select>
            </div>
          </div>
        </div>
      </Card>

      <!-- Customer List -->
      <Card>
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  <input type="checkbox" id="select-all" class="form-checkbox">
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Khách hàng
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Liên hệ
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Loại
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Tổng đơn hàng
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Tổng chi tiêu
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Lần mua cuối
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Trạng thái
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Thao tác
                </th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200" id="customers-table-body">
              <!-- Data will be populated by JavaScript -->
            </tbody>
          </table>
        </div>
      </Card>

      <!-- Pagination -->
      <div class="flex items-center justify-between">
        <div class="text-sm text-gray-700">
          Hiển thị <span id="showing-from">1</span> đến <span id="showing-to">20</span> của <span id="total-records">0</span> khách hàng
        </div>
        <div class="flex space-x-2" id="pagination-controls">
          <!-- Pagination buttons will be generated by JavaScript -->
        </div>
      </div>
    </main>

    <!-- Add/Edit Customer Modal -->
    <div id="customer-modal" class="modal-overlay hidden" data-modal="customer">
      <div class="modal-content max-w-2xl">
        <div class="modal-header">
          <h3 class="modal-title" id="customer-modal-title">Thêm khách hàng mới</h3>
          <button class="modal-close" data-modal-close>&times;</button>
        </div>
        <div class="modal-body">
          <form id="customer-form" class="space-y-6">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <!-- Basic Information -->
              <div class="space-y-4">
                <h4 class="text-lg font-medium text-gray-900">Thông tin cơ bản</h4>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Họ và tên *</label>
                  <input type="text" id="customer-name" class="form-input w-full" required>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Email</label>
                  <input type="email" id="customer-email" class="form-input w-full">
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Số điện thoại *</label>
                  <input type="tel" id="customer-phone" class="form-input w-full" required>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Ngày sinh</label>
                  <input type="date" id="customer-birthday" class="form-input w-full">
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Giới tính</label>
                  <select id="customer-gender" class="form-select w-full">
                    <option value="">Chọn giới tính</option>
                    <option value="male">Nam</option>
                    <option value="female">Nữ</option>
                    <option value="other">Khác</option>
                  </select>
                </div>
              </div>
              
              <!-- Business Information -->
              <div class="space-y-4">
                <h4 class="text-lg font-medium text-gray-900">Thông tin doanh nghiệp</h4>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Loại khách hàng</label>
                  <select id="customer-type" class="form-select w-full">
                    <option value="individual">Cá nhân</option>
                    <option value="business">Doanh nghiệp</option>
                    <option value="vip">VIP</option>
                    <option value="wholesale">Khách sỉ</option>
                  </select>
                </div>
                
                <div id="company-fields" class="space-y-4 hidden">
                  <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Tên công ty</label>
                    <input type="text" id="company-name" class="form-input w-full">
                  </div>
                  
                  <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Mã số thuế</label>
                    <input type="text" id="tax-code" class="form-input w-full">
                  </div>
                  
                  <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Người đại diện</label>
                    <input type="text" id="representative" class="form-input w-full">
                  </div>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Mức chiết khấu (%)</label>
                  <input type="number" id="discount-rate" class="form-input w-full" min="0" max="100" step="0.1">
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Hạn mức công nợ</label>
                  <input type="number" id="credit-limit" class="form-input w-full" min="0">
                </div>
              </div>
            </div>
            
            <!-- Address Information -->
            <div class="space-y-4">
              <h4 class="text-lg font-medium text-gray-900">Địa chỉ</h4>
              
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Địa chỉ</label>
                <textarea id="customer-address" class="form-textarea w-full" rows="3"></textarea>
              </div>
              
              <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Tỉnh/Thành phố</label>
                  <select id="customer-city" class="form-select w-full">
                    <option value="">Chọn tỉnh/thành</option>
                    <option value="hanoi">Hà Nội</option>
                    <option value="hcm">TP. Hồ Chí Minh</option>
                    <option value="danang">Đà Nẵng</option>
                    <option value="haiphong">Hải Phòng</option>
                    <option value="cantho">Cần Thơ</option>
                  </select>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Quận/Huyện</label>
                  <input type="text" id="customer-district" class="form-input w-full">
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Phường/Xã</label>
                  <input type="text" id="customer-ward" class="form-input w-full">
                </div>
              </div>
            </div>
            
            <!-- Notes -->
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Ghi chú</label>
              <textarea id="customer-notes" class="form-textarea w-full" rows="3"></textarea>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-modal-close>Hủy</button>
          <button type="button" class="btn btn-primary" onclick="saveCustomer()">Lưu khách hàng</button>
        </div>
      </div>
    </div>

    <!-- Customer Details Modal -->
    <div id="customer-details-modal" class="modal-overlay hidden" data-modal="customer-details">
      <div class="modal-content max-w-4xl">
        <div class="modal-header">
          <h3 class="modal-title">Chi tiết khách hàng</h3>
          <button class="modal-close" data-modal-close>&times;</button>
        </div>
        <div class="modal-body">
          <div class="space-y-6">
            <!-- Customer Info -->
            <div class="bg-gray-50 p-6 rounded-lg">
              <div class="flex items-center justify-between mb-4">
                <div class="flex items-center">
                  <div class="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mr-4">
                    <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                    </svg>
                  </div>
                  <div>
                    <h4 class="text-lg font-medium text-gray-900" id="detail-customer-name"></h4>
                    <p class="text-sm text-gray-600" id="detail-customer-type"></p>
                  </div>
                </div>
                <span class="px-3 py-1 rounded-full text-sm font-medium" id="detail-customer-status"></span>
              </div>
              
              <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                <div>
                  <span class="font-medium text-gray-700">Email:</span>
                  <span class="text-gray-600" id="detail-customer-email"></span>
                </div>
                <div>
                  <span class="font-medium text-gray-700">Điện thoại:</span>
                  <span class="text-gray-600" id="detail-customer-phone"></span>
                </div>
                <div>
                  <span class="font-medium text-gray-700">Ngày tham gia:</span>
                  <span class="text-gray-600" id="detail-customer-joined"></span>
                </div>
              </div>
            </div>
            
            <!-- Stats -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div class="bg-blue-50 p-4 rounded-lg text-center">
                <div class="text-2xl font-bold text-blue-900" id="detail-total-orders">0</div>
                <div class="text-sm text-blue-600">Tổng đơn hàng</div>
              </div>
              <div class="bg-green-50 p-4 rounded-lg text-center">
                <div class="text-2xl font-bold text-green-900" id="detail-total-spent">0đ</div>
                <div class="text-sm text-green-600">Tổng chi tiêu</div>
              </div>
              <div class="bg-purple-50 p-4 rounded-lg text-center">
                <div class="text-2xl font-bold text-purple-900" id="detail-avg-order">0đ</div>
                <div class="text-sm text-purple-600">Trung bình/đơn</div>
              </div>
              <div class="bg-orange-50 p-4 rounded-lg text-center">
                <div class="text-2xl font-bold text-orange-900" id="detail-loyalty-points">0</div>
                <div class="text-sm text-orange-600">Điểm tích lũy</div>
              </div>
            </div>
            
            <!-- Recent Orders -->
            <div>
              <h4 class="text-lg font-medium text-gray-900 mb-4">Đơn hàng gần đây</h4>
              <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                  <thead class="bg-gray-50">
                    <tr>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Mã đơn</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Ngày</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Sản phẩm</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Tổng tiền</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Trạng thái</th>
                    </tr>
                  </thead>
                  <tbody class="bg-white divide-y divide-gray-200" id="recent-orders-table">
                    <!-- Recent orders will be populated here -->
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-modal-close>Đóng</button>
          <button type="button" class="btn btn-primary" onclick="editCustomerFromDetails()">Chỉnh sửa</button>
        </div>
      </div>
    </div>
  </DashboardLayout>
</BaseLayout>

<script>
import { formatVND } from '../../lib/utils/currency';
import { formatVietnameseName, formatVietnamesePhone } from '../../lib/utils/format';

document.addEventListener('DOMContentLoaded', function() {
  let customersData = [];
  let filteredData = [];
  let currentPage = 1;
  let perPage = 20;
  let selectedItems = new Set();
  let currentCustomerId = null;

  // Initialize page
  loadCustomersData();
  setupEventListeners();

  function loadCustomersData() {
    // Mock data - in real app, this would come from API
    customersData = [
      {
        id: 1,
        name: 'Nguyễn Văn An',
        email: 'nguyenvanan@gmail.com',
        phone: '0901234567',
        type: 'individual',
        status: 'active',
        totalOrders: 15,
        totalSpent: 45000000,
        lastOrderDate: '2024-01-15',
        joinDate: '2023-06-10',
        address: '123 Đường ABC, Phường XYZ',
        city: 'hanoi',
        district: 'Cầu Giấy',
        ward: 'Dịch Vọng',
        loyaltyPoints: 450,
        discountRate: 0,
        creditLimit: 0,
        notes: 'Khách hàng thân thiết, thường mua GPU cao cấp'
      },
      {
        id: 2,
        name: 'Công ty TNHH Công nghệ ABC',
        email: 'info@abc-tech.com',
        phone: '0287654321',
        type: 'business',
        status: 'active',
        totalOrders: 8,
        totalSpent: 120000000,
        lastOrderDate: '2024-01-10',
        joinDate: '2023-03-15',
        address: '456 Đường DEF, Phường GHI',
        city: 'hcm',
        district: 'Quận 1',
        ward: 'Bến Nghé',
        loyaltyPoints: 1200,
        discountRate: 5,
        creditLimit: 50000000,
        companyName: 'Công ty TNHH Công nghệ ABC',
        taxCode: '0123456789',
        representative: 'Trần Văn B',
        notes: 'Khách hàng doanh nghiệp, mua số lượng lớn'
      },
      {
        id: 3,
        name: 'Lê Thị Cẩm',
        email: 'lethicam@yahoo.com',
        phone: '0909876543',
        type: 'vip',
        status: 'active',
        totalOrders: 25,
        totalSpent: 80000000,
        lastOrderDate: '2024-01-12',
        joinDate: '2022-11-20',
        address: '789 Đường JKL, Phường MNO',
        city: 'danang',
        district: 'Hải Châu',
        ward: 'Thạch Thang',
        loyaltyPoints: 800,
        discountRate: 8,
        creditLimit: 20000000,
        notes: 'Khách VIP, ưu tiên hỗ trợ'
      },
      {
        id: 4,
        name: 'Phạm Minh Đức',
        email: 'phamminhduc@gmail.com',
        phone: '0912345678',
        type: 'wholesale',
        status: 'active',
        totalOrders: 12,
        totalSpent: 95000000,
        lastOrderDate: '2024-01-08',
        joinDate: '2023-08-05',
        address: '321 Đường PQR, Phường STU',
        city: 'hanoi',
        district: 'Hoàn Kiếm',
        ward: 'Hàng Bài',
        loyaltyPoints: 950,
        discountRate: 10,
        creditLimit: 30000000,
        notes: 'Khách sỉ, mua hàng định kỳ'
      }
    ];

    filteredData = [...customersData];
    updateStats();
    renderTable();
  }

  function setupEventListeners() {
    // Search and filters
    document.getElementById('search-input').addEventListener('input', applyFilters);
    document.getElementById('type-filter').addEventListener('change', applyFilters);
    document.getElementById('status-filter').addEventListener('change', applyFilters);
    document.getElementById('region-filter').addEventListener('change', applyFilters);
    document.getElementById('sort-filter').addEventListener('change', applyFilters);

    // Buttons
    document.getElementById('add-customer-btn').addEventListener('click', () => {
      currentCustomerId = null;
      resetCustomerForm();
      document.getElementById('customer-modal-title').textContent = 'Thêm khách hàng mới';
      document.getElementById('customer-modal').classList.remove('hidden');
    });

    document.getElementById('export-customers-btn').addEventListener('click', exportCustomers);
    document.getElementById('import-customers-btn').addEventListener('click', importCustomers);

    // Customer type change
    document.getElementById('customer-type').addEventListener('change', function() {
      const companyFields = document.getElementById('company-fields');
      if (this.value === 'business') {
        companyFields.classList.remove('hidden');
      } else {
        companyFields.classList.add('hidden');
      }
    });

    // Modal handlers
    document.querySelectorAll('[data-modal-close]').forEach(btn => {
      btn.addEventListener('click', function() {
        const modal = this.closest('.modal-overlay');
        modal.classList.add('hidden');
      });
    });

    // Select all
    document.getElementById('select-all').addEventListener('change', function() {
      const checkboxes = document.querySelectorAll('.item-checkbox');
      checkboxes.forEach(checkbox => {
        checkbox.checked = this.checked;
        if (this.checked) {
          selectedItems.add(checkbox.dataset.id);
        } else {
          selectedItems.delete(checkbox.dataset.id);
        }
      });
    });
  }

  function applyFilters() {
    const searchTerm = document.getElementById('search-input').value.toLowerCase();
    const typeFilter = document.getElementById('type-filter').value;
    const statusFilter = document.getElementById('status-filter').value;
    const regionFilter = document.getElementById('region-filter').value;
    const sortFilter = document.getElementById('sort-filter').value;

    filteredData = customersData.filter(customer => {
      const matchesSearch = !searchTerm || 
        customer.name.toLowerCase().includes(searchTerm) ||
        customer.email.toLowerCase().includes(searchTerm) ||
        customer.phone.includes(searchTerm);

      const matchesType = !typeFilter || customer.type === typeFilter;
      const matchesStatus = !statusFilter || customer.status === statusFilter;
      const matchesRegion = !regionFilter || customer.city === regionFilter;

      return matchesSearch && matchesType && matchesStatus && matchesRegion;
    });

    // Sort data
    filteredData.sort((a, b) => {
      switch (sortFilter) {
        case 'name':
          return a.name.localeCompare(b.name);
        case 'created_at':
          return new Date(b.joinDate) - new Date(a.joinDate);
        case 'total_orders':
          return b.totalOrders - a.totalOrders;
        case 'total_spent':
          return b.totalSpent - a.totalSpent;
        case 'last_order':
          return new Date(b.lastOrderDate) - new Date(a.lastOrderDate);
        default:
          return 0;
      }
    });

    currentPage = 1;
    updateStats();
    renderTable();
  }

  function updateStats() {
    const totalCustomers = customersData.length;
    const vipCustomers = customersData.filter(c => c.type === 'vip').length;
    
    // Calculate monthly revenue (mock calculation)
    const monthlyRevenue = customersData.reduce((sum, customer) => {
      const lastOrderDate = new Date(customer.lastOrderDate);
      const currentDate = new Date();
      const monthAgo = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, currentDate.getDate());
      
      if (lastOrderDate >= monthAgo) {
        return sum + (customer.totalSpent / customer.totalOrders); // Average order value
      }
      return sum;
    }, 0);

    const monthlyOrders = customersData.filter(customer => {
      const lastOrderDate = new Date(customer.lastOrderDate);
      const currentDate = new Date();
      const monthAgo = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, currentDate.getDate());
      return lastOrderDate >= monthAgo;
    }).length;

    document.getElementById('total-customers').textContent = totalCustomers;
    document.getElementById('vip-customers').textContent = vipCustomers;
    document.getElementById('monthly-revenue').textContent = formatVND(monthlyRevenue);
    document.getElementById('monthly-orders').textContent = monthlyOrders;
  }

  function renderTable() {
    const start = (currentPage - 1) * perPage;
    const end = start + perPage;
    const pageData = filteredData.slice(start, end);

    const tbody = document.getElementById('customers-table-body');
    tbody.innerHTML = '';

    pageData.forEach(customer => {
      const row = createTableRow(customer);
      tbody.appendChild(row);
    });

    updatePagination();
  }

  function createTableRow(customer) {
    const row = document.createElement('tr');
    row.className = 'hover:bg-gray-50';

    const statusColor = getStatusColor(customer.status);
    const typeColor = getTypeColor(customer.type);
    const avgOrderValue = customer.totalOrders > 0 ? customer.totalSpent / customer.totalOrders : 0;

    row.innerHTML = `
      <td class="px-6 py-4 whitespace-nowrap">
        <input type="checkbox" class="item-checkbox form-checkbox" data-id="${customer.id}">
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="flex items-center">
          <div class="flex-shrink-0 h-10 w-10">
            <div class="h-10 w-10 rounded-full bg-gray-200 flex items-center justify-center">
              <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
            </div>
          </div>
          <div class="ml-4">
            <div class="text-sm font-medium text-gray-900">${customer.name}</div>
            <div class="text-sm text-gray-500">${customer.email}</div>
          </div>
        </div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="text-sm text-gray-900">${formatVietnamesePhone(customer.phone)}</div>
        <div class="text-sm text-gray-500">${customer.city}</div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <span class="px-2 py-1 text-xs font-medium rounded-full bg-${typeColor.bg} text-${typeColor.text}">
          ${getTypeText(customer.type)}
        </span>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="text-sm font-medium text-gray-900">${customer.totalOrders}</div>
        <div class="text-sm text-gray-500">Trung bình: ${formatVND(avgOrderValue)}</div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="text-sm font-medium text-gray-900">${formatVND(customer.totalSpent)}</div>
        <div class="text-sm text-gray-500">Điểm: ${customer.loyaltyPoints}</div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="text-sm text-gray-900">${formatDate(customer.lastOrderDate)}</div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <span class="px-2 py-1 text-xs font-medium rounded-full bg-${statusColor.bg} text-${statusColor.text}">
          ${getStatusText(customer.status)}
        </span>
      </td>
      <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
        <button class="text-blue-600 hover:text-blue-900 mr-3" onclick="viewCustomer(${customer.id})" title="Xem chi tiết">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
          </svg>
        </button>
        <button class="text-green-600 hover:text-green-900 mr-3" onclick="editCustomer(${customer.id})" title="Chỉnh sửa">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
          </svg>
        </button>
        <button class="text-purple-600 hover:text-purple-900" onclick="createOrder(${customer.id})" title="Tạo đơn hàng">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l-1 10H6L5 9z" />
          </svg>
        </button>
      </td>
    `;

    // Add event listener for checkbox
    const checkbox = row.querySelector('.item-checkbox');
    checkbox.addEventListener('change', function() {
      if (this.checked) {
        selectedItems.add(this.dataset.id);
      } else {
        selectedItems.delete(this.dataset.id);
      }
    });

    return row;
  }

  function updatePagination() {
    const totalPages = Math.ceil(filteredData.length / perPage);
    const showingFrom = (currentPage - 1) * perPage + 1;
    const showingTo = Math.min(currentPage * perPage, filteredData.length);

    document.getElementById('showing-from').textContent = showingFrom;
    document.getElementById('showing-to').textContent = showingTo;
    document.getElementById('total-records').textContent = filteredData.length;

    // Create pagination buttons
    const paginationControls = document.getElementById('pagination-controls');
    paginationControls.innerHTML = '';

    if (totalPages <= 1) return;

    // Previous button
    const prevBtn = document.createElement('button');
    prevBtn.className = `px-3 py-1 text-sm border rounded ${currentPage === 1 ? 'bg-gray-100 text-gray-400' : 'bg-white text-gray-700 hover:bg-gray-50'}`;
    prevBtn.textContent = 'Trước';
    prevBtn.disabled = currentPage === 1;
    prevBtn.onclick = () => {
      if (currentPage > 1) {
        currentPage--;
        renderTable();
      }
    };
    paginationControls.appendChild(prevBtn);

    // Page numbers
    for (let i = 1; i <= totalPages; i++) {
      if (i === 1 || i === totalPages || (i >= currentPage - 2 && i <= currentPage + 2)) {
        const pageBtn = document.createElement('button');
        pageBtn.className = `px-3 py-1 text-sm border rounded ${i === currentPage ? 'bg-blue-500 text-white' : 'bg-white text-gray-700 hover:bg-gray-50'}`;
        pageBtn.textContent = i;
        pageBtn.onclick = () => {
          currentPage = i;
          renderTable();
        };
        paginationControls.appendChild(pageBtn);
      }
    }

    // Next button
    const nextBtn = document.createElement('button');
    nextBtn.className = `px-3 py-1 text-sm border rounded ${currentPage === totalPages ? 'bg-gray-100 text-gray-400' : 'bg-white text-gray-700 hover:bg-gray-50'}`;
    nextBtn.textContent = 'Tiếp';
    nextBtn.disabled = currentPage === totalPages;
    nextBtn.onclick = () => {
      if (currentPage < totalPages) {
        currentPage++;
        renderTable();
      }
    };
    paginationControls.appendChild(nextBtn);
  }

  function getStatusColor(status) {
    const colors = {
      'active': { bg: 'green-100', text: 'green-800' },
      'inactive': { bg: 'gray-100', text: 'gray-800' },
      'blacklisted': { bg: 'red-100', text: 'red-800' }
    };
    return colors[status] || { bg: 'gray-100', text: 'gray-800' };
  }

  function getTypeColor(type) {
    const colors = {
      'individual': { bg: 'blue-100', text: 'blue-800' },
      'business': { bg: 'purple-100', text: 'purple-800' },
      'vip': { bg: 'yellow-100', text: 'yellow-800' },
      'wholesale': { bg: 'green-100', text: 'green-800' }
    };
    return colors[type] || { bg: 'gray-100', text: 'gray-800' };
  }

  function getStatusText(status) {
    const statusMap = {
      'active': 'Hoạt động',
      'inactive': 'Không hoạt động',
      'blacklisted': 'Danh sách đen'
    };
    return statusMap[status] || status;
  }

  function getTypeText(type) {
    const typeMap = {
      'individual': 'Cá nhân',
      'business': 'Doanh nghiệp',
      'vip': 'VIP',
      'wholesale': 'Khách sỉ'
    };
    return typeMap[type] || type;
  }

  function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('vi-VN');
  }

  function resetCustomerForm() {
    document.getElementById('customer-form').reset();
    document.getElementById('company-fields').classList.add('hidden');
  }

  // Global functions
  window.viewCustomer = function(id) {
    const customer = customersData.find(c => c.id === id);
    if (!customer) return;

    // Populate customer details modal
    document.getElementById('detail-customer-name').textContent = customer.name;
    document.getElementById('detail-customer-type').textContent = getTypeText(customer.type);
    document.getElementById('detail-customer-email').textContent = customer.email;
    document.getElementById('detail-customer-phone').textContent = formatVietnamesePhone(customer.phone);
    document.getElementById('detail-customer-joined').textContent = formatDate(customer.joinDate);
    
    const statusColor = getStatusColor(customer.status);
    const statusBadge = document.getElementById('detail-customer-status');
    statusBadge.textContent = getStatusText(customer.status);
    statusBadge.className = `px-3 py-1 rounded-full text-sm font-medium bg-${statusColor.bg} text-${statusColor.text}`;

    // Stats
    document.getElementById('detail-total-orders').textContent = customer.totalOrders;
    document.getElementById('detail-total-spent').textContent = formatVND(customer.totalSpent);
    document.getElementById('detail-avg-order').textContent = formatVND(customer.totalOrders > 0 ? customer.totalSpent / customer.totalOrders : 0);
    document.getElementById('detail-loyalty-points').textContent = customer.loyaltyPoints;

    // Mock recent orders
    const recentOrdersTable = document.getElementById('recent-orders-table');
    recentOrdersTable.innerHTML = `
      <tr>
        <td class="px-6 py-4 text-sm text-gray-900">ORD240115001</td>
        <td class="px-6 py-4 text-sm text-gray-900">${formatDate(customer.lastOrderDate)}</td>
        <td class="px-6 py-4 text-sm text-gray-900">CPU Intel i7, RAM 32GB</td>
        <td class="px-6 py-4 text-sm text-gray-900">${formatVND(8500000)}</td>
        <td class="px-6 py-4"><span class="px-2 py-1 text-xs bg-green-100 text-green-800 rounded-full">Hoàn thành</span></td>
      </tr>
      <tr>
        <td class="px-6 py-4 text-sm text-gray-900">ORD240110002</td>
        <td class="px-6 py-4 text-sm text-gray-900">${formatDate('2024-01-10')}</td>
        <td class="px-6 py-4 text-sm text-gray-900">GPU RTX 4070</td>
        <td class="px-6 py-4 text-sm text-gray-900">${formatVND(15990000)}</td>
        <td class="px-6 py-4"><span class="px-2 py-1 text-xs bg-green-100 text-green-800 rounded-full">Hoàn thành</span></td>
      </tr>
    `;

    document.getElementById('customer-details-modal').classList.remove('hidden');
  };

  window.editCustomer = function(id) {
    const customer = customersData.find(c => c.id === id);
    if (!customer) return;

    currentCustomerId = id;
    
    // Populate form
    document.getElementById('customer-name').value = customer.name;
    document.getElementById('customer-email').value = customer.email;
    document.getElementById('customer-phone').value = customer.phone;
    document.getElementById('customer-type').value = customer.type;
    document.getElementById('customer-address').value = customer.address;
    document.getElementById('customer-city').value = customer.city;
    document.getElementById('customer-district').value = customer.district;
    document.getElementById('customer-ward').value = customer.ward;
    document.getElementById('customer-notes').value = customer.notes || '';
    document.getElementById('discount-rate').value = customer.discountRate;
    document.getElementById('credit-limit').value = customer.creditLimit;

    if (customer.type === 'business') {
      document.getElementById('company-fields').classList.remove('hidden');
      document.getElementById('company-name').value = customer.companyName || '';
      document.getElementById('tax-code').value = customer.taxCode || '';
      document.getElementById('representative').value = customer.representative || '';
    }

    document.getElementById('customer-modal-title').textContent = 'Chỉnh sửa khách hàng';
    document.getElementById('customer-modal').classList.remove('hidden');
  };

  window.editCustomerFromDetails = function() {
    document.getElementById('customer-details-modal').classList.add('hidden');
    // The currentCustomerId should be set from the details view
    const detailName = document.getElementById('detail-customer-name').textContent;
    const customer = customersData.find(c => c.name === detailName);
    if (customer) {
      editCustomer(customer.id);
    }
  };

  window.createOrder = function(customerId) {
    // Redirect to POS with customer pre-selected
    window.location.href = `/pos?customer_id=${customerId}`;
  };

  // Validate customer data
  function validateCustomerData(customerData) {
    const errors = [];
    
    // Required fields validation
    if (!customerData.name || customerData.name.trim().length < 2) {
      errors.push('Tên khách hàng phải có ít nhất 2 ký tự');
    }
    
    if (!customerData.phone || !/^[0-9]{10,11}$/.test(customerData.phone)) {
      errors.push('Số điện thoại phải có 10-11 chữ số');
    }
    
    // Email validation (optional but must be valid if provided)
    if (customerData.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(customerData.email)) {
      errors.push('Email không hợp lệ');
    }
    
    // Discount rate validation
    if (customerData.discountRate < 0 || customerData.discountRate > 50) {
      errors.push('Tỷ lệ giảm giá phải từ 0% đến 50%');
    }
    
    // Credit limit validation
    if (customerData.creditLimit < 0) {
      errors.push('Hạn mức tín dụng không thể âm');
    }
    
    // Business-specific validation
    if (customerData.type === 'business') {
      if (!customerData.companyName || customerData.companyName.trim().length < 2) {
        errors.push('Tên công ty phải có ít nhất 2 ký tự');
      }
      
      if (customerData.taxCode && !/^[0-9]{10,13}$/.test(customerData.taxCode)) {
        errors.push('Mã số thuế phải có 10-13 chữ số');
      }
    }
    
    return errors;
  }
  
  // Check for duplicate customer
  function checkDuplicateCustomer(customerData, excludeId = null) {
    return customersData.some(customer => {
      if (excludeId && customer.id === excludeId) return false;
      return customer.phone === customerData.phone || 
             (customerData.email && customer.email === customerData.email) ||
             (customerData.taxCode && customer.taxCode === customerData.taxCode);
    });
  }

  window.saveCustomer = function() {
    const form = document.getElementById('customer-form');
    const formData = new FormData(form);

    const customerData = {
      name: document.getElementById('customer-name').value.trim(),
      email: document.getElementById('customer-email').value.trim(),
      phone: document.getElementById('customer-phone').value.trim(),
      type: document.getElementById('customer-type').value,
      address: document.getElementById('customer-address').value.trim(),
      city: document.getElementById('customer-city').value,
      district: document.getElementById('customer-district').value,
      ward: document.getElementById('customer-ward').value,
      notes: document.getElementById('customer-notes').value.trim(),
      discountRate: parseFloat(document.getElementById('discount-rate').value) || 0,
      creditLimit: parseFloat(document.getElementById('credit-limit').value) || 0
    };

    // Business-specific fields
    if (customerData.type === 'business') {
      customerData.companyName = document.getElementById('company-name').value.trim();
      customerData.taxCode = document.getElementById('tax-code').value.trim();
      customerData.representative = document.getElementById('representative').value.trim();
    }
    
    // Validate customer data
    const validationErrors = validateCustomerData(customerData);
    if (validationErrors.length > 0) {
      alert('Lỗi validation:\n' + validationErrors.join('\n'));
      return;
    }
    
    // Check for duplicates
    if (checkDuplicateCustomer(customerData, currentCustomerId)) {
      alert('Khách hàng đã tồn tại với số điện thoại, email hoặc mã số thuế này!');
      return;
    }

    if (currentCustomerId) {
      // Update existing customer
      const customerIndex = customersData.findIndex(c => c.id === currentCustomerId);
      if (customerIndex !== -1) {
        const updatedCustomer = { 
          ...customersData[customerIndex], 
          ...customerData,
          updatedDate: new Date().toISOString().split('T')[0]
        };
        customersData[customerIndex] = updatedCustomer;
        alert('Cập nhật khách hàng thành công!');
        
        // Log the update
        console.log('Customer updated:', updatedCustomer);
      } else {
        alert('Không tìm thấy khách hàng để cập nhật!');
        return;
      }
    } else {
      // Add new customer
      const newCustomer = {
        id: Date.now(),
        ...customerData,
        status: 'active',
        totalOrders: 0,
        totalSpent: 0,
        lastOrderDate: null,
        joinDate: new Date().toISOString().split('T')[0],
        loyaltyPoints: 0,
        createdDate: new Date().toISOString().split('T')[0]
      };
      customersData.push(newCustomer);
      alert('Thêm khách hàng thành công!');
      
      // Log the new customer
      console.log('New customer added:', newCustomer);
    }

    // Clear form and close modal
    form.reset();
    document.getElementById('customer-modal').classList.add('hidden');
    currentCustomerId = null;
    loadCustomersData();
  };

  function exportCustomers() {
    alert('Đang xuất danh sách khách hàng...');
    setTimeout(() => {
      alert('Xuất danh sách thành công!');
    }, 1000);
  }

  function importCustomers() {
    const fileInput = document.createElement('input');
    fileInput.type = 'file';
    fileInput.accept = '.csv,.xlsx';
    fileInput.onchange = function(e) {
      const file = e.target.files[0];
      if (file) {
        alert('Đang import danh sách khách hàng...');
        setTimeout(() => {
          alert('Import thành công!');
          loadCustomersData();
        }, 1000);
      }
    };
    fileInput.click();
  }
});
</script>

<style>
.form-input, .form-select, .form-textarea {
  @apply px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500;
}

.form-checkbox {
  @apply text-blue-600 border-gray-300 rounded focus:ring-blue-500 focus:ring-2;
}

.modal-overlay {
  @apply fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50;
}

.modal-content {
  @apply bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-screen overflow-y-auto;
}

.modal-header {
  @apply flex items-center justify-between p-6 border-b;
}

.modal-title {
  @apply text-lg font-medium text-gray-900;
}

.modal-close {
  @apply text-gray-400 hover:text-gray-600 text-2xl font-bold;
}

.modal-body {
  @apply p-6;
}

.modal-footer {
  @apply flex items-center justify-end space-x-3 p-6 border-t bg-gray-50;
}

.btn {
  @apply px-4 py-2 rounded-md font-medium focus:outline-none focus:ring-2 focus:ring-offset-2;
}

.btn-primary {
  @apply bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500;
}

.btn-secondary {
  @apply bg-gray-200 text-gray-900 hover:bg-gray-300 focus:ring-gray-500;
}
</style>