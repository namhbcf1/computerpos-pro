---
import BaseLayout from '../../layouts/BaseLayout.astro';
import DashboardLayout from '../../layouts/DashboardLayout.astro';
import Card from '../../components/ui/Card.astro';
import Button from '../../components/ui/Button.astro';
---

<BaseLayout title="POS Returns - ComputerPOS Pro">
  <DashboardLayout>
    <main class="p-6 space-y-6">
      <!-- Header -->
      <div class="flex justify-between items-center">
        <div>
          <h1 class="text-3xl font-bold text-gray-900">POS Returns</h1>
          <p class="text-gray-600 mt-1">Xử lý trả hàng và hoàn tiền cho khách hàng</p>
        </div>
        <div class="flex space-x-3">
          <Button href="/pos" variant="secondary">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Quay lại POS
          </Button>
          <Button onclick="createNewReturn()" variant="primary">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
            </svg>
            Tạo yêu cầu trả hàng
          </Button>
        </div>
      </div>

      <!-- Stats Cards -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card>
          <div class="p-6">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <div class="w-8 h-8 bg-blue-500 rounded-md flex items-center justify-center">
                  <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6" />
                  </svg>
                </div>
              </div>
              <div class="ml-5 w-0 flex-1">
                <dl>
                  <dt class="text-sm font-medium text-gray-500 truncate">Tổng trả hàng</dt>
                  <dd class="text-lg font-medium text-gray-900" id="total-returns">0</dd>
                </dl>
              </div>
            </div>
          </div>
        </Card>

        <Card>
          <div class="p-6">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <div class="w-8 h-8 bg-yellow-500 rounded-md flex items-center justify-center">
                  <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                </div>
              </div>
              <div class="ml-5 w-0 flex-1">
                <dl>
                  <dt class="text-sm font-medium text-gray-500 truncate">Chờ xử lý</dt>
                  <dd class="text-lg font-medium text-gray-900" id="pending-returns">0</dd>
                </dl>
              </div>
            </div>
          </div>
        </Card>

        <Card>
          <div class="p-6">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <div class="w-8 h-8 bg-green-500 rounded-md flex items-center justify-center">
                  <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                  </svg>
                </div>
              </div>
              <div class="ml-5 w-0 flex-1">
                <dl>
                  <dt class="text-sm font-medium text-gray-500 truncate">Đã xử lý</dt>
                  <dd class="text-lg font-medium text-gray-900" id="completed-returns">0</dd>
                </dl>
              </div>
            </div>
          </div>
        </Card>

        <Card>
          <div class="p-6">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <div class="w-8 h-8 bg-red-500 rounded-md flex items-center justify-center">
                  <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                </div>
              </div>
              <div class="ml-5 w-0 flex-1">
                <dl>
                  <dt class="text-sm font-medium text-gray-500 truncate">Tổng hoàn tiền</dt>
                  <dd class="text-lg font-medium text-gray-900" id="total-refunded">0₫</dd>
                </dl>
              </div>
            </div>
          </div>
        </Card>
      </div>

      <!-- Quick Return Search -->
      <Card>
        <div class="p-6">
          <h2 class="text-lg font-medium text-gray-900 mb-4">Tìm kiếm nhanh đơn hàng</h2>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div class="md:col-span-2">
              <label class="form-label">Tìm kiếm đơn hàng để trả</label>
              <div class="relative">
                <input type="text" class="form-input pl-10" id="order-search" placeholder="Nhập mã đơn hàng, mã vận đơn hoặc SĐT khách hàng...">
                <svg class="w-5 h-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
              </div>
            </div>
            <div>
              <label class="form-label">Tìm kiếm theo</label>
              <select class="form-select" id="search-type">
                <option value="order">Mã đơn hàng</option>
                <option value="receipt">Mã hóa đơn</option>
                <option value="phone">Số điện thoại</option>
                <option value="email">Email khách hàng</option>
              </select>
            </div>
          </div>
          <div class="mt-4 flex justify-end">
            <Button onclick="searchOrderForReturn()" variant="primary">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
              Tìm đơn hàng
            </Button>
          </div>
        </div>
      </Card>

      <!-- Filters and Search -->
      <Card>
        <div class="p-6">
          <div class="grid grid-cols-1 md:grid-cols-5 gap-4">
            <div>
              <label class="form-label">Tìm kiếm</label>
              <input type="text" class="form-input" id="search-input" placeholder="Mã trả hàng, khách hàng...">
            </div>
            <div>
              <label class="form-label">Trạng thái</label>
              <select class="form-select" id="status-filter">
                <option value="all">Tất cả</option>
                <option value="pending">Chờ xử lý</option>
                <option value="approved">Đã duyệt</option>
                <option value="processing">Đang xử lý</option>
                <option value="completed">Hoàn thành</option>
                <option value="rejected">Từ chối</option>
              </select>
            </div>
            <div>
              <label class="form-label">Lý do trả</label>
              <select class="form-select" id="reason-filter">
                <option value="all">Tất cả</option>
                <option value="defective">Lỗi sản phẩm</option>
                <option value="wrong-item">Sai sản phẩm</option>
                <option value="damaged">Hư hỏng vận chuyển</option>
                <option value="not-as-described">Không đúng mô tả</option>
                <option value="customer-change">Khách đổi ý</option>
                <option value="warranty">Bảo hành</option>
              </select>
            </div>
            <div>
              <label class="form-label">Khoảng thời gian</label>
              <select class="form-select" id="date-filter">
                <option value="today">Hôm nay</option>
                <option value="week">7 ngày qua</option>
                <option value="month">30 ngày qua</option>
                <option value="quarter">3 tháng qua</option>
                <option value="all">Tất cả</option>
              </select>
            </div>
            <div>
              <label class="form-label">Sắp xếp</label>
              <select class="form-select" id="sort-by">
                <option value="newest">Mới nhất</option>
                <option value="oldest">Cũ nhất</option>
                <option value="amount-desc">Số tiền cao nhất</option>
                <option value="amount-asc">Số tiền thấp nhất</option>
              </select>
            </div>
          </div>
        </div>
      </Card>

      <!-- Returns List -->
      <Card>
        <div class="p-6">
          <div class="flex justify-between items-center mb-6">
            <h2 class="text-lg font-medium text-gray-900">Danh sách yêu cầu trả hàng</h2>
            <div class="flex space-x-3">
              <Button onclick="exportReturns()" variant="secondary">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                Xuất báo cáo
              </Button>
              <Button onclick="refreshReturns()" variant="secondary">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                Làm mới
              </Button>
            </div>
          </div>

          <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
            <table class="min-w-full divide-y divide-gray-300">
              <thead class="bg-gray-50">
                <tr>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Mã trả hàng</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Đơn hàng gốc</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Khách hàng</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Sản phẩm</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Lý do</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Số tiền hoàn</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Trạng thái</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ngày tạo</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Thao tác</th>
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200" id="returns-tbody">
                <!-- Returns will be populated here -->
              </tbody>
            </table>
          </div>
        </div>
      </Card>
    </main>

    <!-- Create Return Modal -->
    <div id="return-modal" class="modal-overlay hidden">
      <div class="modal-content max-w-5xl">
        <div class="modal-header">
          <h3 class="modal-title">Tạo yêu cầu trả hàng mới</h3>
          <button class="modal-close" onclick="closeModal('return-modal')">&times;</button>
        </div>
        <div class="modal-body">
          <div class="space-y-6">
            <!-- Basic Information -->
            <div>
              <h4 class="text-md font-medium text-gray-900 mb-4">Thông tin cơ bản</h4>
              <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <label class="form-label">Mã trả hàng *</label>
                  <input type="text" class="form-input" id="return-code" placeholder="RET-001" readonly>
                </div>
                <div>
                  <label class="form-label">Đơn hàng gốc *</label>
                  <input type="text" class="form-input" id="original-order-id" placeholder="Nhập mã đơn hàng...">
                </div>
                <div>
                  <label class="form-label">Lý do trả hàng *</label>
                  <select class="form-select" id="return-reason">
                    <option value="defective">Lỗi sản phẩm</option>
                    <option value="wrong-item">Sai sản phẩm</option>
                    <option value="damaged">Hư hỏng vận chuyển</option>
                    <option value="not-as-described">Không đúng mô tả</option>
                    <option value="customer-change">Khách đổi ý</option>
                    <option value="warranty">Bảo hành</option>
                  </select>
                </div>
              </div>
            </div>

            <!-- Customer Information -->
            <div>
              <h4 class="text-md font-medium text-gray-900 mb-4">Thông tin khách hàng</h4>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label class="form-label">Tên khách hàng *</label>
                  <input type="text" class="form-input" id="customer-name" placeholder="Họ tên khách hàng...">
                </div>
                <div>
                  <label class="form-label">Số điện thoại *</label>
                  <input type="tel" class="form-input" id="customer-phone" placeholder="0123456789">
                </div>
                <div>
                  <label class="form-label">Email</label>
                  <input type="email" class="form-input" id="customer-email" placeholder="email@example.com">
                </div>
                <div>
                  <label class="form-label">Địa chỉ</label>
                  <input type="text" class="form-input" id="customer-address" placeholder="Địa chỉ khách hàng...">
                </div>
              </div>
            </div>

            <!-- Return Items -->
            <div>
              <h4 class="text-md font-medium text-gray-900 mb-4">Sản phẩm trả</h4>
              <div id="return-items-container">
                <div class="return-item border border-gray-200 rounded-lg p-4">
                  <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                    <div>
                      <label class="form-label">Tên sản phẩm *</label>
                      <input type="text" class="form-input product-name" placeholder="Tên sản phẩm...">
                    </div>
                    <div>
                      <label class="form-label">Số lượng trả *</label>
                      <input type="number" class="form-input return-quantity" min="1" value="1">
                    </div>
                    <div>
                      <label class="form-label">Giá gốc</label>
                      <input type="number" class="form-input original-price" placeholder="0" readonly>
                    </div>
                    <div>
                      <label class="form-label">Tình trạng sản phẩm</label>
                      <select class="form-select item-condition">
                        <option value="like-new">Như mới</option>
                        <option value="good">Tốt</option>
                        <option value="fair">Khá</option>
                        <option value="poor">Kém</option>
                        <option value="defective">Lỗi</option>
                        <option value="damaged">Hư hỏng</option>
                      </select>
                    </div>
                  </div>
                  <div class="mt-4">
                    <label class="form-label">Mô tả tình trạng</label>
                    <textarea class="form-textarea item-description" rows="2" placeholder="Mô tả chi tiết tình trạng sản phẩm..."></textarea>
                  </div>
                </div>
              </div>
              <div class="mt-4">
                <Button onclick="addReturnItem()" variant="secondary" size="sm">
                  <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                  </svg>
                  Thêm sản phẩm
                </Button>
              </div>
            </div>

            <!-- Refund Information -->
            <div>
              <h4 class="text-md font-medium text-gray-900 mb-4">Thông tin hoàn tiền</h4>
              <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <label class="form-label">Tổng giá trị sản phẩm</label>
                  <input type="number" class="form-input" id="total-item-value" readonly>
                </div>
                <div>
                  <label class="form-label">Phí xử lý (%)</label>
                  <input type="number" class="form-input" id="processing-fee" value="0" min="0" max="100" step="0.1">
                </div>
                <div>
                  <label class="form-label">Số tiền hoàn lại</label>
                  <input type="number" class="form-input" id="refund-amount" readonly>
                </div>
              </div>
              <div class="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label class="form-label">Phương thức hoàn tiền</label>
                  <select class="form-select" id="refund-method">
                    <option value="cash">Tiền mặt</option>
                    <option value="bank-transfer">Chuyển khoản</option>
                    <option value="store-credit">Tín dụng cửa hàng</option>
                    <option value="original-payment">Hoàn về phương thức thanh toán gốc</option>
                  </select>
                </div>
                <div>
                  <label class="form-label">Ưu tiên xử lý</label>
                  <select class="form-select" id="processing-priority">
                    <option value="normal">Bình thường</option>
                    <option value="high">Cao</option>
                    <option value="urgent">Khẩn cấp</option>
                  </select>
                </div>
              </div>
            </div>

            <!-- Additional Information -->
            <div>
              <h4 class="text-md font-medium text-gray-900 mb-4">Thông tin bổ sung</h4>
              <div class="space-y-4">
                <div>
                  <label class="form-label">Ghi chú trả hàng</label>
                  <textarea class="form-textarea" id="return-notes" rows="3" placeholder="Ghi chú chi tiết về lý do trả hàng..."></textarea>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label class="form-label">Hình thức nhận hàng</label>
                    <select class="form-select" id="pickup-method">
                      <option value="in-store">Khách đến cửa hàng</option>
                      <option value="pickup-service">Dịch vụ lấy hàng</option>
                      <option value="shipping">Gửi qua vận chuyển</option>
                    </select>
                  </div>
                  <div>
                    <label class="form-label">Thời hạn xử lý (ngày)</label>
                    <input type="number" class="form-input" id="processing-days" value="7" min="1" max="30">
                  </div>
                </div>
                <div class="flex items-center space-x-4">
                  <label class="flex items-center">
                    <input type="checkbox" id="requires-inspection" class="form-checkbox">
                    <span class="ml-2 text-sm text-gray-700">Yêu cầu kiểm tra sản phẩm</span>
                  </label>
                  <label class="flex items-center">
                    <input type="checkbox" id="warranty-return" class="form-checkbox">
                    <span class="ml-2 text-sm text-gray-700">Trả hàng theo bảo hành</span>
                  </label>
                  <label class="flex items-center">
                    <input type="checkbox" id="notify-customer" class="form-checkbox" checked>
                    <span class="ml-2 text-sm text-gray-700">Thông báo cho khách hàng</span>
                  </label>
                </div>
              </div>
            </div>

            <input type="hidden" id="return-id">
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" onclick="closeModal('return-modal')">Hủy</button>
          <button type="button" class="btn btn-primary" onclick="saveReturn()">Tạo yêu cầu trả hàng</button>
        </div>
      </div>
    </div>

    <!-- Return Detail Modal -->
    <div id="return-detail-modal" class="modal-overlay hidden">
      <div class="modal-content max-w-5xl">
        <div class="modal-header">
          <h3 class="modal-title" id="return-detail-title">Chi tiết yêu cầu trả hàng</h3>
          <button class="modal-close" onclick="closeModal('return-detail-modal')">&times;</button>
        </div>
        <div class="modal-body">
          <div id="return-detail-content">
            <!-- Return details will be populated here -->
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" onclick="closeModal('return-detail-modal')">Đóng</button>
          <button type="button" class="btn btn-success" id="approve-return-btn">Duyệt trả hàng</button>
          <button type="button" class="btn btn-primary" id="process-return-btn">Xử lý trả hàng</button>
        </div>
      </div>
    </div>
  </DashboardLayout>
</BaseLayout>

<script>
document.addEventListener('DOMContentLoaded', function() {
  let returns = [];
  let currentReturn = null;

  // Load sample data
  function loadSampleData() {
    returns = JSON.parse(localStorage.getItem('posReturns') || '[]');

    // Initialize with sample data if empty
    if (returns.length === 0) {
      returns = [
        {
          id: 'ret_1',
          code: 'RET-001',
          originalOrderId: 'POS-20240717-001',
          customerName: 'Nguyễn Văn An',
          customerPhone: '0987654321',
          customerEmail: 'an.nguyen@email.com',
          customerAddress: '123 Đường ABC, Q1, TP.HCM',
          items: [
            {
              name: 'Intel Core i5-13400F',
              returnQuantity: 1,
              originalPrice: 4500000,
              condition: 'defective',
              description: 'CPU không khởi động được, có tiếng kêu bất thường'
            }
          ],
          reason: 'defective',
          totalItemValue: 4500000,
          processingFee: 0,
          refundAmount: 4500000,
          refundMethod: 'cash',
          processingPriority: 'high',
          notes: 'Khách hàng phản ánh CPU lỗi từ khi mua, yêu cầu đổi trả ngay lập tức',
          pickupMethod: 'in-store',
          processingDays: 3,
          requiresInspection: true,
          warrantyReturn: false,
          notifyCustomer: true,
          status: 'pending',
          createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
          createdBy: 'Admin User'
        },
        {
          id: 'ret_2',
          code: 'RET-002',
          originalOrderId: 'POS-20240716-015',
          customerName: 'Trần Thị Bình',
          customerPhone: '0912345678',
          customerEmail: 'binh.tran@email.com',
          customerAddress: '456 Đường XYZ, Q3, TP.HCM',
          items: [
            {
              name: 'RTX 4060 8GB',
              returnQuantity: 1,
              originalPrice: 12000000,
              condition: 'like-new',
              description: 'Sản phẩm còn nguyên seal, khách hàng đổi ý không muốn mua'
            }
          ],
          reason: 'customer-change',
          totalItemValue: 12000000,
          processingFee: 5, // 5%
          refundAmount: 11400000,
          refundMethod: 'bank-transfer',
          processingPriority: 'normal',
          notes: 'Khách hàng mua nhầm model, muốn đổi sang RTX 4070 nhưng tạm thời trả hàng trước',
          pickupMethod: 'in-store',
          processingDays: 7,
          requiresInspection: false,
          warrantyReturn: false,
          notifyCustomer: true,
          status: 'approved',
          createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),
          createdBy: 'Staff User',
          approvedAt: new Date(Date.now() - 18 * 60 * 60 * 1000).toISOString(),
          approvedBy: 'Manager'
        },
        {
          id: 'ret_3',
          code: 'RET-003',
          originalOrderId: 'POS-20240715-008',
          customerName: 'Lê Minh Cường',
          customerPhone: '0923456789',
          customerEmail: 'cuong.le@email.com',
          customerAddress: '789 Đường DEF, Q7, TP.HCM',
          items: [
            {
              name: 'RAM DDR4 16GB 3200MHz',
              returnQuantity: 2,
              originalPrice: 1800000,
              condition: 'good',
              description: 'RAM hoạt động bình thường nhưng khách muốn nâng cấp lên DDR5'
            }
          ],
          reason: 'customer-change',
          totalItemValue: 3600000,
          processingFee: 3,
          refundAmount: 3492000,
          refundMethod: 'store-credit',
          processingPriority: 'normal',
          notes: 'Khách hàng muốn trade-in để nâng cấp lên RAM DDR5, sẽ mua thêm RAM mới',
          pickupMethod: 'in-store',
          processingDays: 5,
          requiresInspection: true,
          warrantyReturn: false,
          notifyCustomer: true,
          status: 'completed',
          createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),
          createdBy: 'Staff User',
          completedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),
          completedBy: 'Admin User',
          refundedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString()
        },
        {
          id: 'ret_4',
          code: 'RET-004',
          originalOrderId: 'POS-20240714-023',
          customerName: 'Phạm Thị Dung',
          customerPhone: '0934567890',
          customerEmail: 'dung.pham@email.com',
          customerAddress: '321 Đường GHI, Q5, TP.HCM',
          items: [
            {
              name: 'SSD Samsung 980 Pro 1TB',
              returnQuantity: 1,
              originalPrice: 3200000,
              condition: 'damaged',
              description: 'Ổ cứng bị hỏng trong quá trình vận chuyển, không đọc được'
            }
          ],
          reason: 'damaged',
          totalItemValue: 3200000,
          processingFee: 0,
          refundAmount: 3200000,
          refundMethod: 'original-payment',
          processingPriority: 'urgent',
          notes: 'Sản phẩm bị hỏng do vận chuyển, cần xử lý gấp để đảm bảo quyền lợi khách hàng',
          pickupMethod: 'pickup-service',
          processingDays: 1,
          requiresInspection: true,
          warrantyReturn: false,
          notifyCustomer: true,
          status: 'processing',
          createdAt: new Date(Date.now() - 12 * 60 * 60 * 1000).toISOString(),
          createdBy: 'Staff User',
          startedAt: new Date(Date.now() - 8 * 60 * 60 * 1000).toISOString(),
          startedBy: 'Manager'
        }
      ];

      saveData();
    }
  }

  function saveData() {
    localStorage.setItem('posReturns', JSON.stringify(returns));
  }

  function renderReturns() {
    const tbody = document.getElementById('returns-tbody');
    const searchTerm = document.getElementById('search-input').value.toLowerCase();
    const statusFilter = document.getElementById('status-filter').value;
    const reasonFilter = document.getElementById('reason-filter').value;
    const dateFilter = document.getElementById('date-filter').value;
    const sortBy = document.getElementById('sort-by').value;

    let filteredReturns = returns.filter(returnItem => {
      const matchesSearch = returnItem.code.toLowerCase().includes(searchTerm) ||
                           returnItem.originalOrderId.toLowerCase().includes(searchTerm) ||
                           returnItem.customerName.toLowerCase().includes(searchTerm) ||
                           returnItem.customerPhone.includes(searchTerm);
      const matchesStatus = statusFilter === 'all' || returnItem.status === statusFilter;
      const matchesReason = reasonFilter === 'all' || returnItem.reason === reasonFilter;
      
      let matchesDate = true;
      if (dateFilter !== 'all') {
        const now = new Date();
        const returnDate = new Date(returnItem.createdAt);
        switch (dateFilter) {
          case 'today':
            matchesDate = returnDate.toDateString() === now.toDateString();
            break;
          case 'week':
            const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
            matchesDate = returnDate >= weekAgo;
            break;
          case 'month':
            const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
            matchesDate = returnDate >= monthAgo;
            break;
          case 'quarter':
            const quarterAgo = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000);
            matchesDate = returnDate >= quarterAgo;
            break;
        }
      }

      return matchesSearch && matchesStatus && matchesReason && matchesDate;
    });

    // Sort filtered results
    filteredReturns.sort((a, b) => {
      switch (sortBy) {
        case 'newest':
          return new Date(b.createdAt) - new Date(a.createdAt);
        case 'oldest':
          return new Date(a.createdAt) - new Date(b.createdAt);
        case 'amount-desc':
          return b.refundAmount - a.refundAmount;
        case 'amount-asc':
          return a.refundAmount - b.refundAmount;
        default:
          return 0;
      }
    });

    if (filteredReturns.length === 0) {
      tbody.innerHTML = `
        <tr>
          <td colspan="9" class="px-6 py-12 text-center text-gray-500">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6" />
            </svg>
            <h3 class="mt-2 text-sm font-medium text-gray-900">Không tìm thấy yêu cầu trả hàng nào</h3>
            <p class="mt-1 text-sm text-gray-500">Thử thay đổi bộ lọc hoặc tạo yêu cầu mới.</p>
          </td>
        </tr>
      `;
      updateStats(filteredReturns);
      return;
    }

    let html = '';
    filteredReturns.forEach(returnItem => {
      const statusColors = {
        pending: 'bg-yellow-100 text-yellow-800',
        approved: 'bg-blue-100 text-blue-800',
        processing: 'bg-orange-100 text-orange-800',
        completed: 'bg-green-100 text-green-800',
        rejected: 'bg-red-100 text-red-800'
      };

      const statusNames = {
        pending: 'Chờ xử lý',
        approved: 'Đã duyệt',
        processing: 'Đang xử lý',
        completed: 'Hoàn thành',
        rejected: 'Từ chối'
      };

      const reasonNames = {
        defective: 'Lỗi sản phẩm',
        'wrong-item': 'Sai sản phẩm',
        damaged: 'Hư hỏng vận chuyển',
        'not-as-described': 'Không đúng mô tả',
        'customer-change': 'Khách đổi ý',
        warranty: 'Bảo hành'
      };

      const itemsCount = returnItem.items.length;
      const itemsSummary = itemsCount === 1 
        ? returnItem.items[0].name
        : `${returnItem.items[0].name} +${itemsCount - 1} SP khác`;

      html += `
        <tr class="hover:bg-gray-50">
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="text-sm font-medium text-gray-900">${returnItem.code}</div>
            <div class="text-sm text-gray-500">${returnItem.createdBy}</div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${returnItem.originalOrderId}</td>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="text-sm font-medium text-gray-900">${returnItem.customerName}</div>
            <div class="text-sm text-gray-500">${returnItem.customerPhone}</div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="text-sm text-gray-900">${itemsSummary}</div>
            <div class="text-sm text-gray-500">${itemsCount} sản phẩm</div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="text-sm text-gray-900">${reasonNames[returnItem.reason]}</div>
            ${returnItem.processingPriority === 'urgent' ? '<div class="text-xs text-red-600">Khẩn cấp</div>' : ''}
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="text-sm font-medium text-gray-900">${formatVND(returnItem.refundAmount)}</div>
            ${returnItem.processingFee > 0 ? `<div class="text-xs text-gray-500">Phí: ${returnItem.processingFee}%</div>` : ''}
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <span class="px-2 py-1 text-xs font-medium rounded-full ${statusColors[returnItem.status]}">${statusNames[returnItem.status]}</span>
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            ${new Date(returnItem.createdAt).toLocaleDateString('vi-VN')}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
            <div class="flex space-x-2">
              <button onclick="viewReturn('${returnItem.id}')" class="text-blue-600 hover:text-blue-900">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                </svg>
              </button>
              ${returnItem.status === 'pending' || returnItem.status === 'approved' ? `
                <button onclick="processReturn('${returnItem.id}')" class="text-green-600 hover:text-green-900">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                  </svg>
                </button>
              ` : ''}
            </div>
          </td>
        </tr>
      `;
    });

    tbody.innerHTML = html;
    updateStats(filteredReturns);
  }

  function updateStats(filtered = returns) {
    const totalReturns = filtered.length;
    const pendingReturns = filtered.filter(r => r.status === 'pending' || r.status === 'approved').length;
    const completedReturns = filtered.filter(r => r.status === 'completed').length;
    const totalRefunded = filtered.filter(r => r.status === 'completed').reduce((sum, r) => sum + r.refundAmount, 0);

    document.getElementById('total-returns').textContent = totalReturns;
    document.getElementById('pending-returns').textContent = pendingReturns;
    document.getElementById('completed-returns').textContent = completedReturns;
    document.getElementById('total-refunded').textContent = formatVND(totalRefunded);
  }

  window.createNewReturn = function() {
    // Generate new return code
    const returnCount = returns.length + 1;
    document.getElementById('return-code').value = `RET-${returnCount.toString().padStart(3, '0')}`;
    
    // Reset form
    const form = document.getElementById('return-modal');
    const inputs = form.querySelectorAll('input, select, textarea');
    inputs.forEach(input => {
      if (input.id !== 'return-code') {
        if (input.type === 'checkbox') {
          input.checked = input.id === 'notify-customer';
        } else {
          input.value = '';
        }
      }
    });
    
    // Set defaults
    document.getElementById('return-reason').value = 'defective';
    document.getElementById('refund-method').value = 'cash';
    document.getElementById('processing-priority').value = 'normal';
    document.getElementById('pickup-method').value = 'in-store';
    document.getElementById('processing-days').value = '7';
    document.getElementById('processing-fee').value = '0';
    
    // Reset return items to single item
    const container = document.getElementById('return-items-container');
    container.innerHTML = `
      <div class="return-item border border-gray-200 rounded-lg p-4">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div>
            <label class="form-label">Tên sản phẩm *</label>
            <input type="text" class="form-input product-name" placeholder="Tên sản phẩm...">
          </div>
          <div>
            <label class="form-label">Số lượng trả *</label>
            <input type="number" class="form-input return-quantity" min="1" value="1">
          </div>
          <div>
            <label class="form-label">Giá gốc</label>
            <input type="number" class="form-input original-price" placeholder="0" readonly>
          </div>
          <div>
            <label class="form-label">Tình trạng sản phẩm</label>
            <select class="form-select item-condition">
              <option value="like-new">Như mới</option>
              <option value="good">Tốt</option>
              <option value="fair">Khá</option>
              <option value="poor">Kém</option>
              <option value="defective">Lỗi</option>
              <option value="damaged">Hư hỏng</option>
            </select>
          </div>
        </div>
        <div class="mt-4">
          <label class="form-label">Mô tả tình trạng</label>
          <textarea class="form-textarea item-description" rows="2" placeholder="Mô tả chi tiết tình trạng sản phẩm..."></textarea>
        </div>
      </div>
    `;
    
    document.getElementById('return-id').value = '';
    document.getElementById('return-modal').classList.remove('hidden');
  };

  window.addReturnItem = function() {
    const container = document.getElementById('return-items-container');
    const newItem = document.createElement('div');
    newItem.className = 'return-item border border-gray-200 rounded-lg p-4 mt-4';
    newItem.innerHTML = `
      <div class="flex justify-between items-start mb-4">
        <h5 class="text-sm font-medium text-gray-900">Sản phẩm ${container.children.length + 1}</h5>
        <button type="button" onclick="removeReturnItem(this)" class="text-red-600 hover:text-red-900">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
          </svg>
        </button>
      </div>
      <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div>
          <label class="form-label">Tên sản phẩm *</label>
          <input type="text" class="form-input product-name" placeholder="Tên sản phẩm...">
        </div>
        <div>
          <label class="form-label">Số lượng trả *</label>
          <input type="number" class="form-input return-quantity" min="1" value="1">
        </div>
        <div>
          <label class="form-label">Giá gốc</label>
          <input type="number" class="form-input original-price" placeholder="0" readonly>
        </div>
        <div>
          <label class="form-label">Tình trạng sản phẩm</label>
          <select class="form-select item-condition">
            <option value="like-new">Như mới</option>
            <option value="good">Tốt</option>
            <option value="fair">Khá</option>
            <option value="poor">Kém</option>
            <option value="defective">Lỗi</option>
            <option value="damaged">Hư hỏng</option>
          </select>
        </div>
      </div>
      <div class="mt-4">
        <label class="form-label">Mô tả tình trạng</label>
        <textarea class="form-textarea item-description" rows="2" placeholder="Mô tả chi tiết tình trạng sản phẩm..."></textarea>
      </div>
    `;
    container.appendChild(newItem);
  };

  window.removeReturnItem = function(button) {
    const item = button.closest('.return-item');
    item.remove();
    calculateRefundAmount();
  };

  function calculateRefundAmount() {
    const items = document.querySelectorAll('.return-item');
    let totalValue = 0;
    
    items.forEach(item => {
      const quantity = parseInt(item.querySelector('.return-quantity').value) || 0;
      const price = parseFloat(item.querySelector('.original-price').value) || 0;
      totalValue += quantity * price;
    });
    
    const processingFee = parseFloat(document.getElementById('processing-fee').value) || 0;
    const feeAmount = totalValue * (processingFee / 100);
    const refundAmount = totalValue - feeAmount;
    
    document.getElementById('total-item-value').value = totalValue;
    document.getElementById('refund-amount').value = refundAmount;
  }

  // Add event listeners for dynamic calculation
  document.addEventListener('input', function(e) {
    if (e.target.matches('.return-quantity, .original-price') || e.target.id === 'processing-fee') {
      calculateRefundAmount();
    }
  });

  window.searchOrderForReturn = function() {
    const searchTerm = document.getElementById('order-search').value.trim();
    const searchType = document.getElementById('search-type').value;
    
    if (!searchTerm) {
      alert('Vui lòng nhập thông tin tìm kiếm!');
      return;
    }
    
    // Simulate order search - in real app, this would call an API
    alert(`Tìm kiếm ${searchType}: "${searchTerm}"\n\nTính năng này sẽ tích hợp với hệ thống đơn hàng để tự động điền thông tin.`);
  };

  window.saveReturn = function() {
    const code = document.getElementById('return-code').value;
    const originalOrderId = document.getElementById('original-order-id').value;
    const customerName = document.getElementById('customer-name').value;
    const customerPhone = document.getElementById('customer-phone').value;
    const customerEmail = document.getElementById('customer-email').value;
    const customerAddress = document.getElementById('customer-address').value;
    const reason = document.getElementById('return-reason').value;
    const notes = document.getElementById('return-notes').value;

    if (!originalOrderId || !customerName || !customerPhone) {
      alert('Vui lòng điền đầy đủ thông tin bắt buộc!');
      return;
    }

    // Collect return items
    const items = [];
    document.querySelectorAll('.return-item').forEach(item => {
      const productName = item.querySelector('.product-name').value;
      const returnQuantity = parseInt(item.querySelector('.return-quantity').value) || 1;
      const originalPrice = parseFloat(item.querySelector('.original-price').value) || 0;
      const condition = item.querySelector('.item-condition').value;
      const description = item.querySelector('.item-description').value;
      
      if (productName) {
        items.push({
          name: productName,
          returnQuantity,
          originalPrice,
          condition,
          description
        });
      }
    });

    if (items.length === 0) {
      alert('Vui lòng thêm ít nhất một sản phẩm để trả!');
      return;
    }

    // Phone validation
    const phoneRegex = /^[0-9]{10,11}$/;
    if (!phoneRegex.test(customerPhone.replace(/[\s-]/g, ''))) {
      alert('Số điện thoại không hợp lệ!');
      return;
    }

    const totalItemValue = parseFloat(document.getElementById('total-item-value').value) || 0;
    const processingFee = parseFloat(document.getElementById('processing-fee').value) || 0;
    const refundAmount = parseFloat(document.getElementById('refund-amount').value) || 0;

    const returnData = {
      id: 'ret_' + Date.now(),
      code,
      originalOrderId,
      customerName,
      customerPhone,
      customerEmail,
      customerAddress,
      items,
      reason,
      totalItemValue,
      processingFee,
      refundAmount,
      refundMethod: document.getElementById('refund-method').value,
      processingPriority: document.getElementById('processing-priority').value,
      notes,
      pickupMethod: document.getElementById('pickup-method').value,
      processingDays: parseInt(document.getElementById('processing-days').value) || 7,
      requiresInspection: document.getElementById('requires-inspection').checked,
      warrantyReturn: document.getElementById('warranty-return').checked,
      notifyCustomer: document.getElementById('notify-customer').checked,
      status: 'pending',
      createdAt: new Date().toISOString(),
      createdBy: 'Admin User'
    };

    returns.unshift(returnData);
    saveData();
    closeModal('return-modal');
    renderReturns();
    alert('Đã tạo yêu cầu trả hàng thành công!');
  };

  window.viewReturn = function(returnId) {
    const returnItem = returns.find(r => r.id === returnId);
    if (!returnItem) return;

    currentReturn = returnItem;

    const reasonNames = {
      defective: 'Lỗi sản phẩm',
      'wrong-item': 'Sai sản phẩm',
      damaged: 'Hư hỏng vận chuyển',
      'not-as-described': 'Không đúng mô tả',
      'customer-change': 'Khách đổi ý',
      warranty: 'Bảo hành'
    };

    const statusNames = {
      pending: 'Chờ xử lý',
      approved: 'Đã duyệt',
      processing: 'Đang xử lý',
      completed: 'Hoàn thành',
      rejected: 'Từ chối'
    };

    const priorityNames = {
      normal: 'Bình thường',
      high: 'Cao',
      urgent: 'Khẩn cấp'
    };

    let itemsHtml = '';
    returnItem.items.forEach((item, index) => {
      itemsHtml += `
        <div class="border border-gray-200 rounded-lg p-4 ${index > 0 ? 'mt-4' : ''}">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <div class="font-medium text-gray-900">${item.name}</div>
              <div class="text-sm text-gray-500">Số lượng: ${item.returnQuantity}</div>
              <div class="text-sm text-gray-500">Giá gốc: ${formatVND(item.originalPrice)}</div>
              <div class="text-sm text-gray-500">Tình trạng: ${item.condition}</div>
            </div>
            <div>
              <div class="text-sm text-gray-600">${item.description}</div>
            </div>
          </div>
        </div>
      `;
    });

    const html = `
      <div class="space-y-6">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <h4 class="font-semibold text-gray-900 mb-3">Thông tin trả hàng</h4>
            <div class="space-y-2 text-sm">
              <div><strong>Mã trả hàng:</strong> ${returnItem.code}</div>
              <div><strong>Đơn hàng gốc:</strong> ${returnItem.originalOrderId}</div>
              <div><strong>Lý do trả:</strong> ${reasonNames[returnItem.reason]}</div>
              <div><strong>Ưu tiên:</strong> <span class="px-2 py-1 text-xs rounded-full ${getPriorityColor(returnItem.processingPriority)}">${priorityNames[returnItem.processingPriority]}</span></div>
              <div><strong>Trạng thái:</strong> <span class="px-2 py-1 text-xs rounded-full ${getStatusColor(returnItem.status)}">${statusNames[returnItem.status]}</span></div>
              <div><strong>Ngày tạo:</strong> ${new Date(returnItem.createdAt).toLocaleString('vi-VN')}</div>
            </div>
          </div>
          <div>
            <h4 class="font-semibold text-gray-900 mb-3">Thông tin khách hàng</h4>
            <div class="space-y-2 text-sm">
              <div><strong>Tên khách hàng:</strong> ${returnItem.customerName}</div>
              <div><strong>Điện thoại:</strong> <a href="tel:${returnItem.customerPhone}" class="text-blue-600">${returnItem.customerPhone}</a></div>
              ${returnItem.customerEmail ? `<div><strong>Email:</strong> <a href="mailto:${returnItem.customerEmail}" class="text-blue-600">${returnItem.customerEmail}</a></div>` : ''}
              ${returnItem.customerAddress ? `<div><strong>Địa chỉ:</strong> ${returnItem.customerAddress}</div>` : ''}
            </div>
          </div>
        </div>

        <div>
          <h4 class="font-semibold text-gray-900 mb-3">Sản phẩm trả</h4>
          ${itemsHtml}
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <h4 class="font-semibold text-gray-900 mb-3">Thông tin hoàn tiền</h4>
            <div class="space-y-2 text-sm">
              <div><strong>Tổng giá trị:</strong> ${formatVND(returnItem.totalItemValue)}</div>
              <div><strong>Phí xử lý:</strong> ${returnItem.processingFee}%</div>
              <div><strong>Số tiền hoàn:</strong> <span class="font-semibold text-green-600">${formatVND(returnItem.refundAmount)}</span></div>
              <div><strong>Phương thức hoàn:</strong> ${returnItem.refundMethod}</div>
            </div>
          </div>
          <div>
            <h4 class="font-semibold text-gray-900 mb-3">Thông tin xử lý</h4>
            <div class="space-y-2 text-sm">
              <div><strong>Hình thức nhận:</strong> ${returnItem.pickupMethod}</div>
              <div><strong>Thời hạn xử lý:</strong> ${returnItem.processingDays} ngày</div>
              <div><strong>Cần kiểm tra:</strong> ${returnItem.requiresInspection ? 'Có' : 'Không'}</div>
              <div><strong>Bảo hành:</strong> ${returnItem.warrantyReturn ? 'Có' : 'Không'}</div>
              <div><strong>Người tạo:</strong> ${returnItem.createdBy}</div>
            </div>
          </div>
        </div>

        ${returnItem.notes ? `
          <div>
            <h4 class="font-semibold text-gray-900 mb-2">Ghi chú</h4>
            <p class="text-sm text-gray-600 bg-gray-50 p-3 rounded-md">${returnItem.notes}</p>
          </div>
        ` : ''}

        ${returnItem.completedAt ? `
          <div class="bg-green-50 p-4 rounded-md">
            <h4 class="font-semibold text-green-900 mb-2">Thông tin hoàn thành</h4>
            <p class="text-sm text-green-700">Hoàn thành vào: ${new Date(returnItem.completedAt).toLocaleString('vi-VN')}</p>
            ${returnItem.refundedAt ? `<p class="text-sm text-green-700">Đã hoàn tiền vào: ${new Date(returnItem.refundedAt).toLocaleString('vi-VN')}</p>` : ''}
          </div>
        ` : ''}
      </div>
    `;

    document.getElementById('return-detail-title').textContent = `Chi tiết trả hàng ${returnItem.code}`;
    document.getElementById('return-detail-content').innerHTML = html;
    
    // Show/hide action buttons based on status
    const approveBtn = document.getElementById('approve-return-btn');
    const processBtn = document.getElementById('process-return-btn');
    
    if (returnItem.status === 'pending') {
      approveBtn.classList.remove('hidden');
      processBtn.classList.add('hidden');
    } else if (returnItem.status === 'approved') {
      approveBtn.classList.add('hidden');
      processBtn.classList.remove('hidden');
    } else {
      approveBtn.classList.add('hidden');
      processBtn.classList.add('hidden');
    }

    // Set up button events
    approveBtn.onclick = () => approveReturn(returnItem.id);
    processBtn.onclick = () => processReturn(returnItem.id);
    
    document.getElementById('return-detail-modal').classList.remove('hidden');
  };

  window.approveReturn = function(returnId) {
    if (!confirm('Bạn có chắc chắn muốn duyệt yêu cầu trả hàng này?')) return;

    const returnItem = returns.find(r => r.id === returnId);
    if (returnItem) {
      returnItem.status = 'approved';
      returnItem.approvedAt = new Date().toISOString();
      returnItem.approvedBy = 'Admin User';

      saveData();
      closeModal('return-detail-modal');
      renderReturns();
      alert('Đã duyệt yêu cầu trả hàng thành công!');
    }
  };

  window.processReturn = function(returnId) {
    const returnItem = returns.find(r => r.id === returnId);
    if (!returnItem) return;

    if (returnItem.status === 'pending') {
      // Auto-approve first
      returnItem.status = 'approved';
      returnItem.approvedAt = new Date().toISOString();
      returnItem.approvedBy = 'Admin User';
    }

    if (confirm(`Bắt đầu xử lý trả hàng ${returnItem.code}?`)) {
      returnItem.status = 'processing';
      returnItem.startedAt = new Date().toISOString();
      returnItem.startedBy = 'Admin User';

      saveData();
      renderReturns();
      alert('Đã bắt đầu xử lý trả hàng!');

      // Simulate completion after some time
      setTimeout(() => {
        if (confirm(`Hoàn thành trả hàng ${returnItem.code} và hoàn tiền ${formatVND(returnItem.refundAmount)}?`)) {
          returnItem.status = 'completed';
          returnItem.completedAt = new Date().toISOString();
          returnItem.completedBy = 'Admin User';
          returnItem.refundedAt = new Date().toISOString();
          
          saveData();
          renderReturns();
          alert('Đã hoàn thành trả hàng và hoàn tiền!');
        }
      }, 2000);
    }
  };

  function getStatusColor(status) {
    const colors = {
      pending: 'bg-yellow-100 text-yellow-800',
      approved: 'bg-blue-100 text-blue-800',
      processing: 'bg-orange-100 text-orange-800',
      completed: 'bg-green-100 text-green-800',
      rejected: 'bg-red-100 text-red-800'
    };
    return colors[status] || '';
  }

  function getPriorityColor(priority) {
    const colors = {
      normal: 'bg-gray-100 text-gray-800',
      high: 'bg-orange-100 text-orange-800',
      urgent: 'bg-red-100 text-red-800'
    };
    return colors[priority] || '';
  }

  window.exportReturns = function() {
    const csvContent = generateReturnsCSV(returns);
    downloadCSV(csvContent, `pos-returns-${new Date().toISOString().split('T')[0]}.csv`);
  };

  function generateReturnsCSV(data) {
    const headers = ['Mã trả hàng', 'Đơn gốc', 'Khách hàng', 'Điện thoại', 'Số SP', 'Lý do', 'Số tiền hoàn', 'Trạng thái', 'Ngày tạo'];
    
    const statusNames = {
      pending: 'Chờ xử lý',
      approved: 'Đã duyệt',
      processing: 'Đang xử lý',
      completed: 'Hoàn thành',
      rejected: 'Từ chối'
    };

    const reasonNames = {
      defective: 'Lỗi sản phẩm',
      'wrong-item': 'Sai sản phẩm',
      damaged: 'Hư hỏng vận chuyển',
      'not-as-described': 'Không đúng mô tả',
      'customer-change': 'Khách đổi ý',
      warranty: 'Bảo hành'
    };
    
    const rows = data.map(returnItem => [
      returnItem.code,
      returnItem.originalOrderId,
      returnItem.customerName,
      returnItem.customerPhone,
      returnItem.items.length,
      reasonNames[returnItem.reason],
      returnItem.refundAmount,
      statusNames[returnItem.status],
      new Date(returnItem.createdAt).toLocaleDateString('vi-VN')
    ]);

    return [headers, ...rows].map(row => 
      row.map(field => `"${field}"`).join(',')
    ).join('\n');
  }

  function downloadCSV(content, filename) {
    const blob = new Blob([content], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', filename);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  window.refreshReturns = function() {
    renderReturns();
    alert('Đã làm mới danh sách trả hàng!');
  };

  window.closeModal = function(modalId) {
    document.getElementById(modalId).classList.add('hidden');
  };

  function formatVND(amount) {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(amount);
  }

  // Event listeners
  document.getElementById('search-input').addEventListener('input', renderReturns);
  document.getElementById('status-filter').addEventListener('change', renderReturns);
  document.getElementById('reason-filter').addEventListener('change', renderReturns);
  document.getElementById('date-filter').addEventListener('change', renderReturns);
  document.getElementById('sort-by').addEventListener('change', renderReturns);

  // Initialize
  loadSampleData();
  renderReturns();
});
</script>

<style>
.form-input, .form-select, .form-textarea, .form-checkbox {
  @apply px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 w-full;
}

.form-checkbox {
  @apply w-4 h-4;
}

.modal-overlay {
  @apply fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50;
}

.modal-content {
  @apply bg-white rounded-lg shadow-xl w-full mx-4 max-h-screen overflow-y-auto;
}

.modal-header {
  @apply flex items-center justify-between p-6 border-b;
}

.modal-title {
  @apply text-lg font-medium text-gray-900;
}

.modal-close {
  @apply text-gray-400 hover:text-gray-600 text-2xl font-bold cursor-pointer;
}

.modal-body {
  @apply p-6;
}

.modal-footer {
  @apply flex items-center justify-end space-x-3 p-6 border-t bg-gray-50;
}

.btn {
  @apply px-4 py-2 rounded-md font-medium focus:outline-none focus:ring-2 focus:ring-offset-2;
}

.btn-primary {
  @apply bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500;
}

.btn-secondary {
  @apply bg-gray-200 text-gray-900 hover:bg-gray-300 focus:ring-gray-500;
}

.btn-success {
  @apply bg-green-600 text-white hover:bg-green-700 focus:ring-green-500;
}

.form-label {
  @apply block text-sm font-medium text-gray-700 mb-1;
}
</style>