---
import BaseLayout from '../../layouts/BaseLayout.astro';
import DashboardLayout from '../../layouts/DashboardLayout.astro';
import Card from '../../components/ui/Card.astro';
import Button from '../../components/ui/Button.astro';
---

<BaseLayout title="Inventory Adjustments - ComputerPOS Pro">
  <DashboardLayout>
    <main class="p-6 space-y-6">
      <!-- Header -->
      <div class="flex justify-between items-center">
        <div>
          <h1 class="text-3xl font-bold text-gray-900">Inventory Adjustments</h1>
          <p class="text-gray-600 mt-1">Điều chỉnh tồn kho và quản lý biến động</p>
        </div>
        <div class="flex space-x-3">
          <Button href="/inventory" variant="secondary">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Quay lại Kho hàng
          </Button>
          <Button variant="primary" onclick="createNewAdjustment()">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
            </svg>
            Tạo điều chỉnh mới
          </Button>
        </div>
      </div>

      <!-- Adjustment Stats -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card>
          <div class="p-6">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <div class="w-8 h-8 bg-blue-500 rounded-md flex items-center justify-center">
                  <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                  </svg>
                </div>
              </div>
              <div class="ml-5 w-0 flex-1">
                <dl>
                  <dt class="text-sm font-medium text-gray-500 truncate">Tổng điều chỉnh</dt>
                  <dd class="text-lg font-medium text-gray-900" id="total-adjustments">0</dd>
                </dl>
              </div>
            </div>
          </div>
        </Card>

        <Card>
          <div class="p-6">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <div class="w-8 h-8 bg-green-500 rounded-md flex items-center justify-center">
                  <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                  </svg>
                </div>
              </div>
              <div class="ml-5 w-0 flex-1">
                <dl>
                  <dt class="text-sm font-medium text-gray-500 truncate">Tăng tồn kho</dt>
                  <dd class="text-lg font-medium text-gray-900" id="increase-adjustments">0</dd>
                </dl>
              </div>
            </div>
          </div>
        </Card>

        <Card>
          <div class="p-6">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <div class="w-8 h-8 bg-red-500 rounded-md flex items-center justify-center">
                  <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 17h8m0 0V9m0 8l-8-8-4 4-6-6" />
                  </svg>
                </div>
              </div>
              <div class="ml-5 w-0 flex-1">
                <dl>
                  <dt class="text-sm font-medium text-gray-500 truncate">Giảm tồn kho</dt>
                  <dd class="text-lg font-medium text-gray-900" id="decrease-adjustments">0</dd>
                </dl>
              </div>
            </div>
          </div>
        </Card>

        <Card>
          <div class="p-6">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <div class="w-8 h-8 bg-orange-500 rounded-md flex items-center justify-center">
                  <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                </div>
              </div>
              <div class="ml-5 w-0 flex-1">
                <dl>
                  <dt class="text-sm font-medium text-gray-500 truncate">Giá trị điều chỉnh</dt>
                  <dd class="text-lg font-medium text-gray-900" id="adjustment-value">0₫</dd>
                </dl>
              </div>
            </div>
          </div>
        </Card>
      </div>

      <!-- Filters and Search -->
      <Card>
        <div class="p-6">
          <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
              <label class="form-label">Tìm kiếm</label>
              <input type="text" class="form-input" id="search-input" placeholder="Mã sản phẩm, tên sản phẩm...">
            </div>
            <div>
              <label class="form-label">Loại điều chỉnh</label>
              <select class="form-select" id="type-filter">
                <option value="all">Tất cả</option>
                <option value="increase">Tăng tồn kho</option>
                <option value="decrease">Giảm tồn kho</option>
                <option value="damage">Hàng hỏng</option>
                <option value="lost">Mất hàng</option>
                <option value="expired">Hết hạn</option>
                <option value="recount">Kiểm kê</option>
              </select>
            </div>
            <div>
              <label class="form-label">Khoảng thời gian</label>
              <select class="form-select" id="date-filter">
                <option value="7">7 ngày qua</option>
                <option value="30">30 ngày qua</option>
                <option value="90">3 tháng qua</option>
                <option value="365">1 năm qua</option>
                <option value="custom">Tùy chọn</option>
              </select>
            </div>
            <div>
              <label class="form-label">Trạng thái</label>
              <select class="form-select" id="status-filter">
                <option value="all">Tất cả</option>
                <option value="pending">Chờ duyệt</option>
                <option value="approved">Đã duyệt</option>
                <option value="rejected">Từ chối</option>
              </select>
            </div>
          </div>
          <div id="custom-date-range" class="hidden mt-4 grid grid-cols-2 gap-4">
            <div>
              <label class="form-label">Từ ngày</label>
              <input type="date" class="form-input" id="start-date">
            </div>
            <div>
              <label class="form-label">Đến ngày</label>
              <input type="date" class="form-input" id="end-date">
            </div>
          </div>
        </div>
      </Card>

      <!-- Adjustments List -->
      <Card>
        <div class="p-6">
          <div class="flex justify-between items-center mb-6">
            <h2 class="text-lg font-medium text-gray-900">Danh sách điều chỉnh</h2>
            <div class="flex space-x-3">
              <Button onclick="exportAdjustments()" variant="secondary">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                Xuất báo cáo
              </Button>
              <Button onclick="refreshAdjustments()" variant="secondary">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                Làm mới
              </Button>
            </div>
          </div>

          <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
            <table class="min-w-full divide-y divide-gray-300">
              <thead class="bg-gray-50">
                <tr>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Mã điều chỉnh</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Sản phẩm</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Loại</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Số lượng</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Giá trị</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Lý do</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Trạng thái</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ngày tạo</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Thao tác</th>
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200" id="adjustments-tbody">
                <!-- Adjustments will be populated here -->
              </tbody>
            </table>
          </div>
        </div>
      </Card>
    </main>

    <!-- Create Adjustment Modal -->
    <div id="adjustment-modal" class="modal-overlay hidden">
      <div class="modal-content max-w-4xl">
        <div class="modal-header">
          <h3 class="modal-title">Tạo điều chỉnh tồn kho</h3>
          <button class="modal-close" onclick="closeModal('adjustment-modal')">&times;</button>
        </div>
        <div class="modal-body">
          <div class="space-y-6">
            <!-- Basic Information -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label class="form-label">Mã điều chỉnh *</label>
                <input type="text" class="form-input" id="adjustment-code" placeholder="ADJ-001" readonly>
              </div>
              <div>
                <label class="form-label">Loại điều chỉnh *</label>
                <select class="form-select" id="adjustment-type">
                  <option value="increase">Tăng tồn kho</option>
                  <option value="decrease">Giảm tồn kho</option>
                  <option value="damage">Hàng hỏng</option>
                  <option value="lost">Mất hàng</option>
                  <option value="expired">Hết hạn</option>
                  <option value="recount">Kiểm kê</option>
                </select>
              </div>
            </div>

            <div>
              <label class="form-label">Lý do điều chỉnh *</label>
              <textarea class="form-textarea" id="adjustment-reason" rows="3" placeholder="Mô tả lý do điều chỉnh tồn kho..."></textarea>
            </div>

            <!-- Product Selection -->
            <div>
              <label class="form-label">Chọn sản phẩm *</label>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <input type="text" class="form-input" id="product-search" placeholder="Tìm sản phẩm...">
                  <div id="product-suggestions" class="hidden mt-2 border border-gray-200 rounded-md max-h-40 overflow-y-auto">
                    <!-- Product suggestions will be populated here -->
                  </div>
                </div>
                <div>
                  <input type="text" class="form-input" id="selected-product" placeholder="Sản phẩm được chọn" readonly>
                  <input type="hidden" id="selected-product-id">
                </div>
              </div>
            </div>

            <!-- Adjustment Details -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <label class="form-label">Tồn kho hiện tại</label>
                <input type="number" class="form-input" id="current-stock" readonly>
              </div>
              <div>
                <label class="form-label">Số lượng điều chỉnh *</label>
                <input type="number" class="form-input" id="adjustment-quantity" placeholder="Nhập số lượng">
              </div>
              <div>
                <label class="form-label">Tồn kho sau điều chỉnh</label>
                <input type="number" class="form-input" id="new-stock" readonly>
              </div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label class="form-label">Giá trị đơn vị</label>
                <input type="number" class="form-input" id="unit-cost" placeholder="Giá vốn">
              </div>
              <div>
                <label class="form-label">Tổng giá trị điều chỉnh</label>
                <input type="number" class="form-input" id="total-value" readonly>
              </div>
            </div>

            <!-- Additional Information -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label class="form-label">Người thực hiện</label>
                <input type="text" class="form-input" id="created-by" value="Admin User" readonly>
              </div>
              <div>
                <label class="form-label">Ngày tạo</label>
                <input type="date" class="form-input" id="adjustment-date" readonly>
              </div>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" onclick="closeModal('adjustment-modal')">Hủy</button>
          <button type="button" class="btn btn-primary" onclick="saveAdjustment()">Tạo điều chỉnh</button>
        </div>
      </div>
    </div>

    <!-- View Adjustment Modal -->
    <div id="view-adjustment-modal" class="modal-overlay hidden">
      <div class="modal-content max-w-3xl">
        <div class="modal-header">
          <h3 class="modal-title" id="view-adjustment-title">Chi tiết điều chỉnh</h3>
          <button class="modal-close" onclick="closeModal('view-adjustment-modal')">&times;</button>
        </div>
        <div class="modal-body">
          <div id="view-adjustment-content">
            <!-- Adjustment details will be populated here -->
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" onclick="closeModal('view-adjustment-modal')">Đóng</button>
          <button type="button" class="btn btn-success" id="approve-btn" onclick="approveAdjustment()">Duyệt</button>
          <button type="button" class="btn btn-danger" id="reject-btn" onclick="rejectAdjustment()">Từ chối</button>
        </div>
      </div>
    </div>
  </DashboardLayout>
</BaseLayout>

<script>
document.addEventListener('DOMContentLoaded', function() {
  let adjustments = [];
  let products = [];
  let currentViewingAdjustment = null;

  // Load sample data
  function loadSampleData() {
    adjustments = JSON.parse(localStorage.getItem('inventoryAdjustments') || '[]');
    products = JSON.parse(localStorage.getItem('products') || '[]');

    // Initialize with sample data if empty
    if (adjustments.length === 0) {
      adjustments = [
        {
          id: 'adj_1',
          code: 'ADJ-001',
          productId: 'prod_1',
          productName: 'Intel Core i5-13400F',
          productSku: 'CPU-I5-13400F',
          type: 'decrease',
          quantity: -5,
          currentStock: 25,
          newStock: 20,
          unitCost: 4500000,
          totalValue: -22500000,
          reason: 'Hàng bị hỏng trong quá trình vận chuyển',
          status: 'approved',
          createdBy: 'Nguyễn Văn A',
          createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),
          approvedBy: 'Trần Thị B',
          approvedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString()
        },
        {
          id: 'adj_2',
          code: 'ADJ-002',
          productId: 'prod_2',
          productName: 'RTX 4070 Super',
          productSku: 'GPU-RTX-4070S',
          type: 'increase',
          quantity: 10,
          currentStock: 15,
          newStock: 25,
          unitCost: 18000000,
          totalValue: 180000000,
          reason: 'Bổ sung tồn kho từ đơn hàng mới về',
          status: 'pending',
          createdBy: 'Lê Văn C',
          createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString()
        },
        {
          id: 'adj_3',
          code: 'ADJ-003',
          productId: 'prod_3',
          productName: 'RAM DDR4 16GB Corsair',
          productSku: 'RAM-DDR4-16GB-COR',
          type: 'recount',
          quantity: -2,
          currentStock: 32,
          newStock: 30,
          unitCost: 1800000,
          totalValue: -3600000,
          reason: 'Kiểm kê định kỳ - phát hiện thiếu hàng',
          status: 'approved',
          createdBy: 'Phạm Thị D',
          createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),
          approvedBy: 'Hoàng Văn E',
          approvedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString()
        },
        {
          id: 'adj_4',
          code: 'ADJ-004',
          productId: 'prod_4',
          productName: 'SSD Samsung 980 Pro 1TB',
          productSku: 'SSD-SAM-980P-1TB',
          type: 'damage',
          quantity: -3,
          currentStock: 18,
          newStock: 15,
          unitCost: 3200000,
          totalValue: -9600000,
          reason: 'Phát hiện 3 ổ SSD bị lỗi bad sector',
          status: 'rejected',
          createdBy: 'Võ Văn F',
          createdAt: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000).toISOString(),
          rejectedBy: 'Trần Thị B',
          rejectedAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),
          rejectionReason: 'Cần kiểm tra lại thực tế trước khi điều chỉnh'
        }
      ];

      products = [
        { id: 'prod_1', name: 'Intel Core i5-13400F', sku: 'CPU-I5-13400F', stock: 20, cost: 4500000 },
        { id: 'prod_2', name: 'RTX 4070 Super', sku: 'GPU-RTX-4070S', stock: 25, cost: 18000000 },
        { id: 'prod_3', name: 'RAM DDR4 16GB Corsair', sku: 'RAM-DDR4-16GB-COR', stock: 30, cost: 1800000 },
        { id: 'prod_4', name: 'SSD Samsung 980 Pro 1TB', sku: 'SSD-SAM-980P-1TB', stock: 15, cost: 3200000 },
        { id: 'prod_5', name: 'Motherboard ASUS B550M', sku: 'MB-ASUS-B550M', stock: 12, cost: 2800000 }
      ];

      saveData();
    }
  }

  function saveData() {
    localStorage.setItem('inventoryAdjustments', JSON.stringify(adjustments));
    localStorage.setItem('products', JSON.stringify(products));
  }

  function renderAdjustments() {
    const tbody = document.getElementById('adjustments-tbody');
    const searchTerm = document.getElementById('search-input').value.toLowerCase();
    const typeFilter = document.getElementById('type-filter').value;
    const statusFilter = document.getElementById('status-filter').value;
    const dateFilter = document.getElementById('date-filter').value;

    let filteredAdjustments = adjustments.filter(adj => {
      const matchesSearch = adj.productName.toLowerCase().includes(searchTerm) ||
                           adj.productSku.toLowerCase().includes(searchTerm) ||
                           adj.code.toLowerCase().includes(searchTerm);
      const matchesType = typeFilter === 'all' || adj.type === typeFilter;
      const matchesStatus = statusFilter === 'all' || adj.status === statusFilter;
      
      let matchesDate = true;
      if (dateFilter !== 'custom') {
        const days = parseInt(dateFilter);
        const cutoffDate = new Date(Date.now() - days * 24 * 60 * 60 * 1000);
        matchesDate = new Date(adj.createdAt) >= cutoffDate;
      }

      return matchesSearch && matchesType && matchesStatus && matchesDate;
    });

    if (filteredAdjustments.length === 0) {
      tbody.innerHTML = `
        <tr>
          <td colspan="9" class="px-6 py-12 text-center text-gray-500">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
            </svg>
            <h3 class="mt-2 text-sm font-medium text-gray-900">Không tìm thấy điều chỉnh nào</h3>
            <p class="mt-1 text-sm text-gray-500">Thử thay đổi bộ lọc hoặc tạo điều chỉnh mới.</p>
          </td>
        </tr>
      `;
      return;
    }

    let html = '';
    filteredAdjustments.forEach(adjustment => {
      const statusColors = {
        pending: 'bg-yellow-100 text-yellow-800',
        approved: 'bg-green-100 text-green-800',
        rejected: 'bg-red-100 text-red-800'
      };

      const statusNames = {
        pending: 'Chờ duyệt',
        approved: 'Đã duyệt',
        rejected: 'Từ chối'
      };

      const typeNames = {
        increase: 'Tăng kho',
        decrease: 'Giảm kho',
        damage: 'Hàng hỏng',
        lost: 'Mất hàng',
        expired: 'Hết hạn',
        recount: 'Kiểm kê'
      };

      const typeColors = {
        increase: 'text-green-600',
        decrease: 'text-red-600',
        damage: 'text-orange-600',
        lost: 'text-red-600',
        expired: 'text-gray-600',
        recount: 'text-blue-600'
      };

      html += `
        <tr class="hover:bg-gray-50">
          <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${adjustment.code}</td>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="text-sm font-medium text-gray-900">${adjustment.productName}</div>
            <div class="text-sm text-gray-500">${adjustment.productSku}</div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <span class="text-sm font-medium ${typeColors[adjustment.type]}">${typeNames[adjustment.type]}</span>
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm ${adjustment.quantity >= 0 ? 'text-green-600' : 'text-red-600'}">
            ${adjustment.quantity >= 0 ? '+' : ''}${adjustment.quantity}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm ${adjustment.totalValue >= 0 ? 'text-green-600' : 'text-red-600'}">
            ${formatVND(adjustment.totalValue)}
          </td>
          <td class="px-6 py-4 text-sm text-gray-500 max-w-xs truncate">${adjustment.reason}</td>
          <td class="px-6 py-4 whitespace-nowrap">
            <span class="px-2 py-1 text-xs font-medium rounded-full ${statusColors[adjustment.status]}">${statusNames[adjustment.status]}</span>
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            ${new Date(adjustment.createdAt).toLocaleDateString('vi-VN')}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
            <div class="flex space-x-2">
              <button onclick="viewAdjustment('${adjustment.id}')" class="text-blue-600 hover:text-blue-900">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                </svg>
              </button>
              ${adjustment.status === 'pending' ? `
                <button onclick="approveAdjustmentQuick('${adjustment.id}')" class="text-green-600 hover:text-green-900">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                  </svg>
                </button>
              ` : ''}
            </div>
          </td>
        </tr>
      `;
    });

    tbody.innerHTML = html;
  }

  function updateStats() {
    const totalAdjustments = adjustments.length;
    const increaseAdjustments = adjustments.filter(adj => adj.quantity > 0).length;
    const decreaseAdjustments = adjustments.filter(adj => adj.quantity < 0).length;
    const totalValue = adjustments.reduce((sum, adj) => sum + adj.totalValue, 0);

    document.getElementById('total-adjustments').textContent = totalAdjustments;
    document.getElementById('increase-adjustments').textContent = increaseAdjustments;
    document.getElementById('decrease-adjustments').textContent = decreaseAdjustments;
    document.getElementById('adjustment-value').textContent = formatVND(totalValue);
  }

  window.createNewAdjustment = function() {
    // Generate new adjustment code
    const adjustmentCount = adjustments.length + 1;
    document.getElementById('adjustment-code').value = `ADJ-${adjustmentCount.toString().padStart(3, '0')}`;
    
    // Set current date
    document.getElementById('adjustment-date').value = new Date().toISOString().split('T')[0];
    
    // Reset form
    document.getElementById('adjustment-type').value = 'increase';
    document.getElementById('adjustment-reason').value = '';
    document.getElementById('product-search').value = '';
    document.getElementById('selected-product').value = '';
    document.getElementById('selected-product-id').value = '';
    document.getElementById('current-stock').value = '';
    document.getElementById('adjustment-quantity').value = '';
    document.getElementById('new-stock').value = '';
    document.getElementById('unit-cost').value = '';
    document.getElementById('total-value').value = '';

    document.getElementById('adjustment-modal').classList.remove('hidden');
  };

  window.saveAdjustment = function() {
    const code = document.getElementById('adjustment-code').value;
    const type = document.getElementById('adjustment-type').value;
    const reason = document.getElementById('adjustment-reason').value;
    const productId = document.getElementById('selected-product-id').value;
    const productName = document.getElementById('selected-product').value;
    const quantity = parseInt(document.getElementById('adjustment-quantity').value) || 0;
    const unitCost = parseFloat(document.getElementById('unit-cost').value) || 0;
    const currentStock = parseInt(document.getElementById('current-stock').value) || 0;

    if (!productId || !reason || quantity === 0) {
      alert('Vui lòng điền đầy đủ thông tin bắt buộc!');
      return;
    }

    const product = products.find(p => p.id === productId);
    if (!product) {
      alert('Sản phẩm không hợp lệ!');
      return;
    }

    const adjustedQuantity = type === 'increase' ? Math.abs(quantity) : -Math.abs(quantity);
    const newStock = currentStock + adjustedQuantity;
    const totalValue = adjustedQuantity * unitCost;

    const adjustment = {
      id: 'adj_' + Date.now(),
      code,
      productId,
      productName,
      productSku: product.sku,
      type,
      quantity: adjustedQuantity,
      currentStock,
      newStock,
      unitCost,
      totalValue,
      reason,
      status: 'pending',
      createdBy: 'Admin User',
      createdAt: new Date().toISOString()
    };

    adjustments.unshift(adjustment);
    saveData();
    closeModal('adjustment-modal');
    renderAdjustments();
    updateStats();
    alert('Đã tạo điều chỉnh thành công!');
  };

  window.viewAdjustment = function(adjustmentId) {
    const adjustment = adjustments.find(adj => adj.id === adjustmentId);
    if (!adjustment) return;

    currentViewingAdjustment = adjustment;

    const html = `
      <div class="space-y-6">
        <div class="grid grid-cols-2 gap-6">
          <div>
            <h4 class="font-semibold text-gray-900 mb-3">Thông tin điều chỉnh</h4>
            <div class="space-y-2 text-sm">
              <div><strong>Mã điều chỉnh:</strong> ${adjustment.code}</div>
              <div><strong>Loại:</strong> ${getTypeName(adjustment.type)}</div>
              <div><strong>Trạng thái:</strong> <span class="px-2 py-1 text-xs rounded-full ${getStatusColor(adjustment.status)}">${getStatusName(adjustment.status)}</span></div>
              <div><strong>Người tạo:</strong> ${adjustment.createdBy}</div>
              <div><strong>Ngày tạo:</strong> ${new Date(adjustment.createdAt).toLocaleString('vi-VN')}</div>
            </div>
          </div>
          <div>
            <h4 class="font-semibold text-gray-900 mb-3">Thông tin sản phẩm</h4>
            <div class="space-y-2 text-sm">
              <div><strong>Tên sản phẩm:</strong> ${adjustment.productName}</div>
              <div><strong>SKU:</strong> ${adjustment.productSku}</div>
              <div><strong>Tồn kho trước:</strong> ${adjustment.currentStock}</div>
              <div><strong>Số lượng điều chỉnh:</strong> <span class="${adjustment.quantity >= 0 ? 'text-green-600' : 'text-red-600'}">${adjustment.quantity >= 0 ? '+' : ''}${adjustment.quantity}</span></div>
              <div><strong>Tồn kho sau:</strong> ${adjustment.newStock}</div>
            </div>
          </div>
        </div>

        <div>
          <h4 class="font-semibold text-gray-900 mb-2">Lý do điều chỉnh</h4>
          <p class="text-sm text-gray-600 bg-gray-50 p-3 rounded-md">${adjustment.reason}</p>
        </div>

        <div class="grid grid-cols-2 gap-6">
          <div>
            <h4 class="font-semibold text-gray-900 mb-3">Thông tin tài chính</h4>
            <div class="space-y-2 text-sm">
              <div><strong>Giá vốn đơn vị:</strong> ${formatVND(adjustment.unitCost)}</div>
              <div><strong>Tổng giá trị:</strong> <span class="${adjustment.totalValue >= 0 ? 'text-green-600' : 'text-red-600'}">${formatVND(adjustment.totalValue)}</span></div>
            </div>
          </div>
          <div>
            <h4 class="font-semibold text-gray-900 mb-3">Thông tin duyệt</h4>
            <div class="space-y-2 text-sm">
              ${adjustment.approvedBy ? `
                <div><strong>Người duyệt:</strong> ${adjustment.approvedBy}</div>
                <div><strong>Ngày duyệt:</strong> ${new Date(adjustment.approvedAt).toLocaleString('vi-VN')}</div>
              ` : adjustment.rejectedBy ? `
                <div><strong>Người từ chối:</strong> ${adjustment.rejectedBy}</div>
                <div><strong>Ngày từ chối:</strong> ${new Date(adjustment.rejectedAt).toLocaleString('vi-VN')}</div>
                <div><strong>Lý do từ chối:</strong> ${adjustment.rejectionReason}</div>
              ` : '<div class="text-gray-500">Chờ duyệt</div>'}
            </div>
          </div>
        </div>
      </div>
    `;

    document.getElementById('view-adjustment-title').textContent = `Chi tiết điều chỉnh ${adjustment.code}`;
    document.getElementById('view-adjustment-content').innerHTML = html;
    
    // Show/hide action buttons based on status
    const approveBtn = document.getElementById('approve-btn');
    const rejectBtn = document.getElementById('reject-btn');
    
    if (adjustment.status === 'pending') {
      approveBtn.classList.remove('hidden');
      rejectBtn.classList.remove('hidden');
    } else {
      approveBtn.classList.add('hidden');
      rejectBtn.classList.add('hidden');
    }

    document.getElementById('view-adjustment-modal').classList.remove('hidden');
  };

  window.approveAdjustment = function() {
    if (!currentViewingAdjustment) return;

    if (!confirm('Bạn có chắc chắn muốn duyệt điều chỉnh này?')) return;

    const adjustment = adjustments.find(adj => adj.id === currentViewingAdjustment.id);
    if (adjustment) {
      adjustment.status = 'approved';
      adjustment.approvedBy = 'Admin User';
      adjustment.approvedAt = new Date().toISOString();

      // Update product stock
      const product = products.find(p => p.id === adjustment.productId);
      if (product) {
        product.stock = adjustment.newStock;
      }

      saveData();
      closeModal('view-adjustment-modal');
      renderAdjustments();
      updateStats();
      alert('Đã duyệt điều chỉnh thành công!');
    }
  };

  window.rejectAdjustment = function() {
    if (!currentViewingAdjustment) return;

    const reason = prompt('Nhập lý do từ chối:');
    if (!reason) return;

    const adjustment = adjustments.find(adj => adj.id === currentViewingAdjustment.id);
    if (adjustment) {
      adjustment.status = 'rejected';
      adjustment.rejectedBy = 'Admin User';
      adjustment.rejectedAt = new Date().toISOString();
      adjustment.rejectionReason = reason;

      saveData();
      closeModal('view-adjustment-modal');
      renderAdjustments();
      updateStats();
      alert('Đã từ chối điều chỉnh!');
    }
  };

  window.approveAdjustmentQuick = function(adjustmentId) {
    if (!confirm('Bạn có chắc chắn muốn duyệt điều chỉnh này?')) return;

    const adjustment = adjustments.find(adj => adj.id === adjustmentId);
    if (adjustment) {
      adjustment.status = 'approved';
      adjustment.approvedBy = 'Admin User';
      adjustment.approvedAt = new Date().toISOString();

      // Update product stock
      const product = products.find(p => p.id === adjustment.productId);
      if (product) {
        product.stock = adjustment.newStock;
      }

      saveData();
      renderAdjustments();
      updateStats();
      alert('Đã duyệt điều chỉnh thành công!');
    }
  };

  // Product search functionality
  document.getElementById('product-search').addEventListener('input', function() {
    const searchTerm = this.value.toLowerCase();
    const suggestions = document.getElementById('product-suggestions');
    
    if (searchTerm.length < 2) {
      suggestions.classList.add('hidden');
      return;
    }

    const filteredProducts = products.filter(product => 
      product.name.toLowerCase().includes(searchTerm) ||
      product.sku.toLowerCase().includes(searchTerm)
    ).slice(0, 5);

    if (filteredProducts.length > 0) {
      let html = '';
      filteredProducts.forEach(product => {
        html += `
          <div class="p-2 hover:bg-gray-100 cursor-pointer" onclick="selectProduct('${product.id}', '${product.name}', '${product.sku}', ${product.stock}, ${product.cost})">
            <div class="font-medium">${product.name}</div>
            <div class="text-sm text-gray-500">${product.sku} - Tồn: ${product.stock}</div>
          </div>
        `;
      });
      suggestions.innerHTML = html;
      suggestions.classList.remove('hidden');
    } else {
      suggestions.classList.add('hidden');
    }
  });

  window.selectProduct = function(id, name, sku, stock, cost) {
    document.getElementById('selected-product').value = `${name} (${sku})`;
    document.getElementById('selected-product-id').value = id;
    document.getElementById('current-stock').value = stock;
    document.getElementById('unit-cost').value = cost;
    document.getElementById('product-suggestions').classList.add('hidden');
    document.getElementById('product-search').value = '';
    calculateNewStock();
  };

  // Calculate new stock when adjustment quantity changes
  document.getElementById('adjustment-quantity').addEventListener('input', calculateNewStock);
  document.getElementById('adjustment-type').addEventListener('change', calculateNewStock);

  function calculateNewStock() {
    const currentStock = parseInt(document.getElementById('current-stock').value) || 0;
    const quantity = parseInt(document.getElementById('adjustment-quantity').value) || 0;
    const type = document.getElementById('adjustment-type').value;
    const unitCost = parseFloat(document.getElementById('unit-cost').value) || 0;

    const adjustedQuantity = type === 'increase' ? Math.abs(quantity) : -Math.abs(quantity);
    const newStock = currentStock + adjustedQuantity;
    const totalValue = adjustedQuantity * unitCost;

    document.getElementById('new-stock').value = newStock;
    document.getElementById('total-value').value = totalValue;
  }

  function getTypeName(type) {
    const names = {
      increase: 'Tăng kho',
      decrease: 'Giảm kho',
      damage: 'Hàng hỏng',
      lost: 'Mất hàng',
      expired: 'Hết hạn',
      recount: 'Kiểm kê'
    };
    return names[type] || type;
  }

  function getStatusName(status) {
    const names = {
      pending: 'Chờ duyệt',
      approved: 'Đã duyệt',
      rejected: 'Từ chối'
    };
    return names[status] || status;
  }

  function getStatusColor(status) {
    const colors = {
      pending: 'bg-yellow-100 text-yellow-800',
      approved: 'bg-green-100 text-green-800',
      rejected: 'bg-red-100 text-red-800'
    };
    return colors[status] || '';
  }

  window.exportAdjustments = function() {
    const csvContent = generateAdjustmentCSV(adjustments);
    downloadCSV(csvContent, `inventory-adjustments-${new Date().toISOString().split('T')[0]}.csv`);
  };

  function generateAdjustmentCSV(data) {
    const headers = ['Mã điều chỉnh', 'Sản phẩm', 'SKU', 'Loại', 'Số lượng', 'Giá trị', 'Lý do', 'Trạng thái', 'Người tạo', 'Ngày tạo'];
    
    const rows = data.map(adj => [
      adj.code,
      adj.productName,
      adj.productSku,
      getTypeName(adj.type),
      adj.quantity,
      adj.totalValue,
      adj.reason,
      getStatusName(adj.status),
      adj.createdBy,
      new Date(adj.createdAt).toLocaleDateString('vi-VN')
    ]);

    return [headers, ...rows].map(row => 
      row.map(field => `"${field}"`).join(',')
    ).join('\n');
  }

  function downloadCSV(content, filename) {
    const blob = new Blob([content], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', filename);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  window.refreshAdjustments = function() {
    renderAdjustments();
    updateStats();
  };

  window.closeModal = function(modalId) {
    document.getElementById(modalId).classList.add('hidden');
  };

  function formatVND(amount) {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(amount);
  }

  // Event listeners
  document.getElementById('search-input').addEventListener('input', renderAdjustments);
  document.getElementById('type-filter').addEventListener('change', renderAdjustments);
  document.getElementById('status-filter').addEventListener('change', renderAdjustments);
  document.getElementById('date-filter').addEventListener('change', function() {
    const customRange = document.getElementById('custom-date-range');
    if (this.value === 'custom') {
      customRange.classList.remove('hidden');
    } else {
      customRange.classList.add('hidden');
      renderAdjustments();
    }
  });

  // Initialize
  loadSampleData();
  renderAdjustments();
  updateStats();
});
</script>

<style>
.form-input, .form-select, .form-textarea {
  @apply px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 w-full;
}

.modal-overlay {
  @apply fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50;
}

.modal-content {
  @apply bg-white rounded-lg shadow-xl w-full mx-4 max-h-screen overflow-y-auto;
}

.modal-header {
  @apply flex items-center justify-between p-6 border-b;
}

.modal-title {
  @apply text-lg font-medium text-gray-900;
}

.modal-close {
  @apply text-gray-400 hover:text-gray-600 text-2xl font-bold cursor-pointer;
}

.modal-body {
  @apply p-6;
}

.modal-footer {
  @apply flex items-center justify-end space-x-3 p-6 border-t bg-gray-50;
}

.btn {
  @apply px-4 py-2 rounded-md font-medium focus:outline-none focus:ring-2 focus:ring-offset-2;
}

.btn-primary {
  @apply bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500;
}

.btn-secondary {
  @apply bg-gray-200 text-gray-900 hover:bg-gray-300 focus:ring-gray-500;
}

.btn-success {
  @apply bg-green-600 text-white hover:bg-green-700 focus:ring-green-500;
}

.btn-danger {
  @apply bg-red-600 text-white hover:bg-red-700 focus:ring-red-500;
}

.form-label {
  @apply block text-sm font-medium text-gray-700 mb-1;
}
</style>