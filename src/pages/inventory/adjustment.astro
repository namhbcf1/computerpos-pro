---
import BaseLayout from '../../layouts/BaseLayout.astro';
import DashboardLayout from '../../layouts/DashboardLayout.astro';
import Card from '../../components/ui/Card.astro';
import Button from '../../components/ui/Button.astro';
---

<BaseLayout title="Kiểm kê tồn kho - ComputerPOS Pro">
  <DashboardLayout>
    <main class="p-6 space-y-6">
      <!-- Header -->
      <div class="flex justify-between items-center">
        <div>
          <h1 class="text-3xl font-bold text-gray-900">Kiểm kê tồn kho</h1>
          <p class="text-gray-600 mt-1">Điều chỉnh số lượng tồn kho theo kết quả kiểm kê thực tế</p>
        </div>
        <div class="flex space-x-3">
          <Button href="/inventory" variant="secondary">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16l-4-4m0 0l4-4m-4 4h18" />
            </svg>
            Quay lại
          </Button>
          <Button id="save-adjustments-btn" variant="primary">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
            </svg>
            Lưu điều chỉnh
          </Button>
        </div>
      </div>

      <!-- Quick Actions -->
      <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <div class="p-4 text-center">
            <button id="start-stocktake-btn" class="w-full bg-blue-50 hover:bg-blue-100 p-4 rounded-lg border-2 border-dashed border-blue-300">
              <svg class="w-8 h-8 text-blue-600 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01" />
              </svg>
              <div class="text-sm font-medium text-blue-900">Bắt đầu kiểm kê</div>
            </button>
          </div>
        </Card>

        <Card>
          <div class="p-4 text-center">
            <button id="scan-mode-btn" class="w-full bg-green-50 hover:bg-green-100 p-4 rounded-lg border-2 border-dashed border-green-300">
              <svg class="w-8 h-8 text-green-600 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z" />
              </svg>
              <div class="text-sm font-medium text-green-900">Quét barcode</div>
            </button>
          </div>
        </Card>

        <Card>
          <div class="p-4 text-center">
            <button id="import-count-btn" class="w-full bg-purple-50 hover:bg-purple-100 p-4 rounded-lg border-2 border-dashed border-purple-300">
              <svg class="w-8 h-8 text-purple-600 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10" />
              </svg>
              <div class="text-sm font-medium text-purple-900">Import Excel</div>
            </button>
          </div>
        </Card>

        <Card>
          <div class="p-4 text-center">
            <button id="export-template-btn" class="w-full bg-orange-50 hover:bg-orange-100 p-4 rounded-lg border-2 border-dashed border-orange-300">
              <svg class="w-8 h-8 text-orange-600 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              <div class="text-sm font-medium text-orange-900">Xuất template</div>
            </button>
          </div>
        </Card>
      </div>

      <!-- Filters -->
      <Card>
        <div class="p-6">
          <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Tìm kiếm</label>
              <input 
                type="text" 
                id="search-input"
                class="form-input w-full"
                placeholder="Tên sản phẩm, SKU, barcode..."
              />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Danh mục</label>
              <select id="category-filter" class="form-select w-full">
                <option value="">Tất cả danh mục</option>
                <option value="cpu">CPU - Bộ vi xử lý</option>
                <option value="motherboard">Mainboard - Bo mạch chủ</option>
                <option value="ram">RAM - Bộ nhớ</option>
                <option value="gpu">GPU - Card đồ họa</option>
                <option value="storage">Storage - Ổ cứng</option>
                <option value="psu">PSU - Nguồn máy tính</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Trạng thái kiểm kê</label>
              <select id="status-filter" class="form-select w-full">
                <option value="">Tất cả</option>
                <option value="pending">Chưa kiểm kê</option>
                <option value="counting">Đang kiểm kê</option>
                <option value="completed">Đã hoàn thành</option>
                <option value="discrepancy">Có chênh lệch</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Vị trí</label>
              <select id="location-filter" class="form-select w-full">
                <option value="">Tất cả vị trí</option>
                <option value="A1">Khu A1 - CPU/Mainboard</option>
                <option value="A2">Khu A2 - RAM/Storage</option>
                <option value="B1">Khu B1 - GPU/PSU</option>
                <option value="B2">Khu B2 - Case/Cooling</option>
              </select>
            </div>
          </div>

          <!-- Adjustment Summary -->
          <div class="grid grid-cols-1 md:grid-cols-5 gap-4 mt-6">
            <div class="bg-blue-50 p-3 rounded-lg text-center">
              <div class="text-lg font-bold text-blue-900" id="total-items">0</div>
              <div class="text-xs text-blue-600">Tổng sản phẩm</div>
            </div>
            <div class="bg-green-50 p-3 rounded-lg text-center">
              <div class="text-lg font-bold text-green-900" id="completed-items">0</div>
              <div class="text-xs text-green-600">Đã kiểm kê</div>
            </div>
            <div class="bg-yellow-50 p-3 rounded-lg text-center">
              <div class="text-lg font-bold text-yellow-900" id="pending-items">0</div>
              <div class="text-xs text-yellow-600">Chưa kiểm kê</div>
            </div>
            <div class="bg-red-50 p-3 rounded-lg text-center">
              <div class="text-lg font-bold text-red-900" id="discrepancy-items">0</div>
              <div class="text-xs text-red-600">Có chênh lệch</div>
            </div>
            <div class="bg-purple-50 p-3 rounded-lg text-center">
              <div class="text-lg font-bold text-purple-900" id="total-adjustments">0</div>
              <div class="text-xs text-purple-600">Tổng điều chỉnh</div>
            </div>
          </div>
        </div>
      </Card>

      <!-- Adjustment Table -->
      <Card>
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  <input type="checkbox" id="select-all" class="form-checkbox">
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Sản phẩm
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Vị trí
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Tồn kho hệ thống
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Kiểm kê thực tế
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Chênh lệch
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Lý do
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Trạng thái
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Thao tác
                </th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200" id="adjustment-table-body">
              <!-- Data will be populated by JavaScript -->
            </tbody>
          </table>
        </div>
      </Card>

      <!-- Pagination -->
      <div class="flex items-center justify-between">
        <div class="text-sm text-gray-700">
          Hiển thị <span id="showing-from">1</span> đến <span id="showing-to">20</span> của <span id="total-records">0</span> sản phẩm
        </div>
        <div class="flex space-x-2" id="pagination-controls">
          <!-- Pagination buttons will be generated by JavaScript -->
        </div>
      </div>
    </main>

    <!-- Barcode Scanner Modal -->
    <div id="scanner-modal" class="modal-overlay hidden" data-modal="scanner">
      <div class="modal-content max-w-md">
        <div class="modal-header">
          <h3 class="modal-title">Quét barcode</h3>
          <button class="modal-close" data-modal-close>&times;</button>
        </div>
        <div class="modal-body">
          <div class="space-y-4">
            <div class="bg-gray-100 p-4 rounded-lg text-center">
              <svg class="w-16 h-16 text-gray-400 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z" />
              </svg>
              <div class="text-sm text-gray-600">Camera sẽ hiển thị ở đây</div>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Hoặc nhập barcode thủ công</label>
              <input type="text" id="manual-barcode" class="form-input w-full" placeholder="Nhập barcode...">
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-modal-close>Đóng</button>
          <button type="button" class="btn btn-primary" onclick="processBarcode()">Quét</button>
        </div>
      </div>
    </div>

    <!-- Adjustment Details Modal -->
    <div id="adjustment-modal" class="modal-overlay hidden" data-modal="adjustment">
      <div class="modal-content max-w-lg">
        <div class="modal-header">
          <h3 class="modal-title">Chi tiết điều chỉnh</h3>
          <button class="modal-close" data-modal-close>&times;</button>
        </div>
        <div class="modal-body">
          <div class="space-y-4">
            <div id="product-info" class="bg-gray-50 p-4 rounded-lg">
              <!-- Product info will be populated -->
            </div>
            
            <div class="grid grid-cols-2 gap-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Tồn kho hệ thống</label>
                <input type="number" id="system-quantity" class="form-input w-full" readonly>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Số lượng thực tế</label>
                <input type="number" id="actual-quantity" class="form-input w-full" min="0">
              </div>
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Chênh lệch</label>
              <input type="number" id="difference" class="form-input w-full" readonly>
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Lý do điều chỉnh</label>
              <select id="adjustment-reason" class="form-select w-full">
                <option value="">Chọn lý do...</option>
                <option value="count_error">Lỗi đếm</option>
                <option value="damage">Hỏng hóc</option>
                <option value="theft">Thất thoát</option>
                <option value="return">Trả hàng</option>
                <option value="transfer">Chuyển kho</option>
                <option value="other">Khác</option>
              </select>
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Ghi chú</label>
              <textarea id="adjustment-note" class="form-textarea w-full" rows="3" placeholder="Ghi chú chi tiết..."></textarea>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-modal-close>Hủy</button>
          <button type="button" class="btn btn-primary" onclick="saveAdjustment()">Lưu điều chỉnh</button>
        </div>
      </div>
    </div>

    <!-- Import Excel Modal -->
    <div id="import-modal" class="modal-overlay hidden" data-modal="import">
      <div class="modal-content max-w-lg">
        <div class="modal-header">
          <h3 class="modal-title">Import số liệu kiểm kê</h3>
          <button class="modal-close" data-modal-close>&times;</button>
        </div>
        <div class="modal-body">
          <div class="space-y-4">
            <div class="bg-blue-50 p-4 rounded-lg">
              <h4 class="font-medium text-blue-900 mb-2">Hướng dẫn:</h4>
              <ul class="text-sm text-blue-800 space-y-1">
                <li>1. Tải template Excel bằng nút "Xuất template"</li>
                <li>2. Điền số lượng thực tế vào cột "Actual Count"</li>
                <li>3. Lưu file và upload lại</li>
              </ul>
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Chọn file Excel</label>
              <input type="file" id="excel-file" class="form-input w-full" accept=".xlsx,.xls" />
            </div>
            
            <div class="bg-yellow-50 p-4 rounded-lg">
              <div class="flex items-center">
                <svg class="w-5 h-5 text-yellow-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z" />
                </svg>
                <span class="text-sm font-medium text-yellow-800">Dữ liệu import sẽ ghi đè lên dữ liệu hiện tại</span>
              </div>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-modal-close>Hủy</button>
          <button type="button" class="btn btn-primary" onclick="importExcel()">Import</button>
        </div>
      </div>
    </div>
  </DashboardLayout>
</BaseLayout>

<script>
import { formatVND } from '../../lib/utils/currency';

document.addEventListener('DOMContentLoaded', function() {
  let adjustmentData = [];
  let filteredData = [];
  let currentPage = 1;
  let perPage = 20;
  let selectedItems = new Set();
  let currentAdjustmentId = null;

  // Initialize page
  loadAdjustmentData();
  setupEventListeners();

  function loadAdjustmentData() {
    // Mock data - in real app, this would come from API
    adjustmentData = [
      {
        id: 1,
        sku: 'CPU-INTEL-i5-13400F',
        barcode: '8806194558598',
        name: 'Intel Core i5-13400F',
        category: 'cpu',
        location: 'A1-01',
        systemQuantity: 25,
        actualQuantity: 23,
        difference: -2,
        reason: 'damage',
        note: 'Phát hiện 2 chiếc bị hỏng seal',
        status: 'completed',
        adjustedBy: 'Nguyễn Văn A',
        adjustedDate: '2024-01-15T10:30:00',
        costPrice: 4200000
      },
      {
        id: 2,
        sku: 'VGA-NVIDIA-RTX4070-MSI',
        barcode: '4719072881958',
        name: 'MSI GeForce RTX 4070 GAMING X TRIO',
        category: 'gpu',
        location: 'B2-05',
        systemQuantity: 8,
        actualQuantity: null,
        difference: 0,
        reason: '',
        note: '',
        status: 'pending',
        adjustedBy: null,
        adjustedDate: null,
        costPrice: 14490000
      },
      {
        id: 3,
        sku: 'RAM-CORSAIR-16GB-DDR4',
        barcode: '0843591070849',
        name: 'Corsair Vengeance LPX 16GB DDR4-3200',
        category: 'ram',
        location: 'A2-03',
        systemQuantity: 15,
        actualQuantity: 18,
        difference: 3,
        reason: 'count_error',
        note: 'Lỗi đếm lần trước',
        status: 'completed',
        adjustedBy: 'Trần Thị B',
        adjustedDate: '2024-01-14T14:20:00',
        costPrice: 1690000
      },
      {
        id: 4,
        sku: 'SSD-SAMSUNG-980-1TB',
        barcode: '8806092043439',
        name: 'Samsung 980 NVMe SSD 1TB',
        category: 'storage',
        location: 'A2-02',
        systemQuantity: 40,
        actualQuantity: 38,
        difference: -2,
        reason: 'theft',
        note: 'Nghi ngờ thất thoát',
        status: 'discrepancy',
        adjustedBy: 'Lê Văn C',
        adjustedDate: '2024-01-13T09:15:00',
        costPrice: 1990000
      }
    ];

    filteredData = [...adjustmentData];
    updateStats();
    renderTable();
  }

  function setupEventListeners() {
    // Search and filters
    document.getElementById('search-input').addEventListener('input', applyFilters);
    document.getElementById('category-filter').addEventListener('change', applyFilters);
    document.getElementById('status-filter').addEventListener('change', applyFilters);
    document.getElementById('location-filter').addEventListener('change', applyFilters);

    // Quick actions
    document.getElementById('start-stocktake-btn').addEventListener('click', startStocktake);
    document.getElementById('scan-mode-btn').addEventListener('click', () => {
      document.getElementById('scanner-modal').classList.remove('hidden');
    });
    document.getElementById('import-count-btn').addEventListener('click', () => {
      document.getElementById('import-modal').classList.remove('hidden');
    });
    document.getElementById('export-template-btn').addEventListener('click', exportTemplate);
    document.getElementById('save-adjustments-btn').addEventListener('click', saveAllAdjustments);

    // Select all
    document.getElementById('select-all').addEventListener('change', function() {
      const checkboxes = document.querySelectorAll('.item-checkbox');
      checkboxes.forEach(checkbox => {
        checkbox.checked = this.checked;
        if (this.checked) {
          selectedItems.add(checkbox.dataset.id);
        } else {
          selectedItems.delete(checkbox.dataset.id);
        }
      });
    });

    // Modal handlers
    document.querySelectorAll('[data-modal-close]').forEach(btn => {
      btn.addEventListener('click', function() {
        const modal = this.closest('.modal-overlay');
        modal.classList.add('hidden');
      });
    });

    // Actual quantity input handler
    document.getElementById('actual-quantity').addEventListener('input', function() {
      const systemQty = parseInt(document.getElementById('system-quantity').value) || 0;
      const actualQty = parseInt(this.value) || 0;
      const difference = actualQty - systemQty;
      document.getElementById('difference').value = difference;
    });
  }

  function applyFilters() {
    const searchTerm = document.getElementById('search-input').value.toLowerCase();
    const categoryFilter = document.getElementById('category-filter').value;
    const statusFilter = document.getElementById('status-filter').value;
    const locationFilter = document.getElementById('location-filter').value;

    filteredData = adjustmentData.filter(item => {
      const matchesSearch = !searchTerm || 
        item.name.toLowerCase().includes(searchTerm) ||
        item.sku.toLowerCase().includes(searchTerm) ||
        item.barcode.includes(searchTerm);

      const matchesCategory = !categoryFilter || item.category === categoryFilter;
      const matchesStatus = !statusFilter || item.status === statusFilter;
      const matchesLocation = !locationFilter || item.location.startsWith(locationFilter);

      return matchesSearch && matchesCategory && matchesStatus && matchesLocation;
    });

    currentPage = 1;
    updateStats();
    renderTable();
  }

  function updateStats() {
    const totalItems = adjustmentData.length;
    const completedItems = adjustmentData.filter(item => item.status === 'completed').length;
    const pendingItems = adjustmentData.filter(item => item.status === 'pending').length;
    const discrepancyItems = adjustmentData.filter(item => item.status === 'discrepancy').length;
    const totalAdjustments = adjustmentData.filter(item => item.difference !== 0).length;

    document.getElementById('total-items').textContent = totalItems;
    document.getElementById('completed-items').textContent = completedItems;
    document.getElementById('pending-items').textContent = pendingItems;
    document.getElementById('discrepancy-items').textContent = discrepancyItems;
    document.getElementById('total-adjustments').textContent = totalAdjustments;
  }

  function renderTable() {
    const start = (currentPage - 1) * perPage;
    const end = start + perPage;
    const pageData = filteredData.slice(start, end);

    const tbody = document.getElementById('adjustment-table-body');
    tbody.innerHTML = '';

    pageData.forEach(item => {
      const row = createTableRow(item);
      tbody.appendChild(row);
    });

    updatePagination();
  }

  function createTableRow(item) {
    const row = document.createElement('tr');
    row.className = 'hover:bg-gray-50';

    const statusColor = getStatusColor(item.status);
    const differenceColor = item.difference > 0 ? 'text-green-600' : 
                           item.difference < 0 ? 'text-red-600' : 'text-gray-600';

    row.innerHTML = `
      <td class="px-6 py-4 whitespace-nowrap">
        <input type="checkbox" class="item-checkbox form-checkbox" data-id="${item.id}">
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="flex items-center">
          <div class="flex-shrink-0 h-10 w-10">
            <div class="h-10 w-10 rounded-lg bg-gray-200 flex items-center justify-center">
              <span class="text-xs font-medium text-gray-600">${item.category.toUpperCase()}</span>
            </div>
          </div>
          <div class="ml-4">
            <div class="text-sm font-medium text-gray-900">${item.name}</div>
            <div class="text-sm text-gray-500">${item.sku}</div>
          </div>
        </div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <span class="px-2 py-1 text-xs font-medium bg-gray-100 text-gray-800 rounded-full">
          ${item.location}
        </span>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="text-sm font-medium text-gray-900">${item.systemQuantity}</div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="text-sm font-medium text-gray-900">
          ${item.actualQuantity !== null ? item.actualQuantity : '-'}
        </div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="text-sm font-medium ${differenceColor}">
          ${item.difference !== 0 ? (item.difference > 0 ? '+' : '') + item.difference : '0'}
        </div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="text-sm text-gray-900">${getReasonText(item.reason)}</div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <span class="px-2 py-1 text-xs font-medium rounded-full bg-${statusColor.bg} text-${statusColor.text}">
          ${getStatusText(item.status)}
        </span>
      </td>
      <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
        <button class="text-blue-600 hover:text-blue-900 mr-3" onclick="editAdjustment(${item.id})">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
          </svg>
        </button>
        <button class="text-green-600 hover:text-green-900" onclick="quickCount(${item.id})">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </button>
      </td>
    `;

    // Add event listener for checkbox
    const checkbox = row.querySelector('.item-checkbox');
    checkbox.addEventListener('change', function() {
      if (this.checked) {
        selectedItems.add(this.dataset.id);
      } else {
        selectedItems.delete(this.dataset.id);
      }
    });

    return row;
  }

  function updatePagination() {
    const totalPages = Math.ceil(filteredData.length / perPage);
    const showingFrom = (currentPage - 1) * perPage + 1;
    const showingTo = Math.min(currentPage * perPage, filteredData.length);

    document.getElementById('showing-from').textContent = showingFrom;
    document.getElementById('showing-to').textContent = showingTo;
    document.getElementById('total-records').textContent = filteredData.length;

    // Create pagination buttons
    const paginationControls = document.getElementById('pagination-controls');
    paginationControls.innerHTML = '';

    if (totalPages <= 1) return;

    // Previous button
    const prevBtn = document.createElement('button');
    prevBtn.className = `px-3 py-1 text-sm border rounded ${currentPage === 1 ? 'bg-gray-100 text-gray-400' : 'bg-white text-gray-700 hover:bg-gray-50'}`;
    prevBtn.textContent = 'Trước';
    prevBtn.disabled = currentPage === 1;
    prevBtn.onclick = () => {
      if (currentPage > 1) {
        currentPage--;
        renderTable();
      }
    };
    paginationControls.appendChild(prevBtn);

    // Page numbers
    for (let i = 1; i <= totalPages; i++) {
      if (i === 1 || i === totalPages || (i >= currentPage - 2 && i <= currentPage + 2)) {
        const pageBtn = document.createElement('button');
        pageBtn.className = `px-3 py-1 text-sm border rounded ${i === currentPage ? 'bg-blue-500 text-white' : 'bg-white text-gray-700 hover:bg-gray-50'}`;
        pageBtn.textContent = i;
        pageBtn.onclick = () => {
          currentPage = i;
          renderTable();
        };
        paginationControls.appendChild(pageBtn);
      }
    }

    // Next button
    const nextBtn = document.createElement('button');
    nextBtn.className = `px-3 py-1 text-sm border rounded ${currentPage === totalPages ? 'bg-gray-100 text-gray-400' : 'bg-white text-gray-700 hover:bg-gray-50'}`;
    nextBtn.textContent = 'Tiếp';
    nextBtn.disabled = currentPage === totalPages;
    nextBtn.onclick = () => {
      if (currentPage < totalPages) {
        currentPage++;
        renderTable();
      }
    };
    paginationControls.appendChild(nextBtn);
  }

  function getStatusColor(status) {
    const colors = {
      'pending': { bg: 'yellow-100', text: 'yellow-800' },
      'counting': { bg: 'blue-100', text: 'blue-800' },
      'completed': { bg: 'green-100', text: 'green-800' },
      'discrepancy': { bg: 'red-100', text: 'red-800' }
    };
    return colors[status] || { bg: 'gray-100', text: 'gray-800' };
  }

  function getStatusText(status) {
    const statusMap = {
      'pending': 'Chưa kiểm kê',
      'counting': 'Đang kiểm kê',
      'completed': 'Đã hoàn thành',
      'discrepancy': 'Có chênh lệch'
    };
    return statusMap[status] || status;
  }

  function getReasonText(reason) {
    const reasonMap = {
      'count_error': 'Lỗi đếm',
      'damage': 'Hỏng hóc',
      'theft': 'Thất thoát',
      'return': 'Trả hàng',
      'transfer': 'Chuyển kho',
      'other': 'Khác'
    };
    return reasonMap[reason] || '-';
  }

  // Global functions
  window.editAdjustment = function(id) {
    const item = adjustmentData.find(item => item.id === id);
    if (!item) return;

    currentAdjustmentId = id;
    
    // Populate modal
    document.getElementById('product-info').innerHTML = `
      <div class="flex items-center">
        <div class="flex-shrink-0 h-12 w-12">
          <div class="h-12 w-12 rounded-lg bg-gray-200 flex items-center justify-center">
            <span class="text-sm font-medium text-gray-600">${item.category.toUpperCase()}</span>
          </div>
        </div>
        <div class="ml-4">
          <div class="text-sm font-medium text-gray-900">${item.name}</div>
          <div class="text-sm text-gray-500">${item.sku} • ${item.location}</div>
        </div>
      </div>
    `;
    
    document.getElementById('system-quantity').value = item.systemQuantity;
    document.getElementById('actual-quantity').value = item.actualQuantity || '';
    document.getElementById('difference').value = item.difference || 0;
    document.getElementById('adjustment-reason').value = item.reason || '';
    document.getElementById('adjustment-note').value = item.note || '';
    
    document.getElementById('adjustment-modal').classList.remove('hidden');
  };

  window.quickCount = function(id) {
    const newCount = prompt('Nhập số lượng thực tế:');
    if (newCount !== null && !isNaN(newCount)) {
      const item = adjustmentData.find(item => item.id === id);
      if (item) {
        item.actualQuantity = parseInt(newCount);
        item.difference = item.actualQuantity - item.systemQuantity;
        item.status = 'completed';
        item.adjustedBy = 'Current User';
        item.adjustedDate = new Date().toISOString();
        updateStats();
        renderTable();
      }
    }
  };

  window.saveAdjustment = function() {
    const actualQuantity = parseInt(document.getElementById('actual-quantity').value);
    const reason = document.getElementById('adjustment-reason').value;
    const note = document.getElementById('adjustment-note').value;
    
    if (isNaN(actualQuantity)) {
      alert('Vui lòng nhập số lượng thực tế hợp lệ');
      return;
    }
    
    const item = adjustmentData.find(item => item.id === currentAdjustmentId);
    if (item) {
      item.actualQuantity = actualQuantity;
      item.difference = actualQuantity - item.systemQuantity;
      item.reason = reason;
      item.note = note;
      item.status = item.difference === 0 ? 'completed' : 'discrepancy';
      item.adjustedBy = 'Current User';
      item.adjustedDate = new Date().toISOString();
      
      updateStats();
      renderTable();
      document.getElementById('adjustment-modal').classList.add('hidden');
    }
  };

  window.processBarcode = function() {
    const barcode = document.getElementById('manual-barcode').value;
    if (!barcode) {
      alert('Vui lòng nhập barcode');
      return;
    }
    
    const item = adjustmentData.find(item => item.barcode === barcode);
    if (item) {
      document.getElementById('scanner-modal').classList.add('hidden');
      editAdjustment(item.id);
    } else {
      alert('Không tìm thấy sản phẩm với barcode này');
    }
  };

  window.importExcel = function() {
    const fileInput = document.getElementById('excel-file');
    const file = fileInput.files[0];
    
    if (!file) {
      alert('Vui lòng chọn file Excel');
      return;
    }
    
    // Mock import process
    alert('Đang import dữ liệu...');
    setTimeout(() => {
      alert('Import thành công!');
      document.getElementById('import-modal').classList.add('hidden');
      loadAdjustmentData(); // Reload data
    }, 1000);
  };

  function startStocktake() {
    if (confirm('Bắt đầu phiên kiểm kê mới? Điều này sẽ reset trạng thái tất cả sản phẩm.')) {
      adjustmentData.forEach(item => {
        item.status = 'pending';
        item.actualQuantity = null;
        item.difference = 0;
        item.reason = '';
        item.note = '';
        item.adjustedBy = null;
        item.adjustedDate = null;
      });
      
      updateStats();
      renderTable();
      alert('Đã bắt đầu phiên kiểm kê mới');
    }
  }

  function exportTemplate() {
    // Mock export
    alert('Đang xuất template Excel...');
    setTimeout(() => {
      alert('Template đã được tải xuống!');
    }, 1000);
  }

  function saveAllAdjustments() {
    const pendingItems = adjustmentData.filter(item => item.status === 'pending').length;
    
    if (pendingItems > 0) {
      if (!confirm(`Còn ${pendingItems} sản phẩm chưa kiểm kê. Bạn có muốn lưu điều chỉnh ngay bây giờ?`)) {
        return;
      }
    }
    
    // Mock save process
    alert('Đang lưu điều chỉnh...');
    setTimeout(() => {
      alert('Đã lưu tất cả điều chỉnh thành công!');
    }, 1000);
  }
});
</script>

<style>
.form-input, .form-select, .form-textarea {
  @apply px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500;
}

.form-checkbox {
  @apply text-blue-600 border-gray-300 rounded focus:ring-blue-500 focus:ring-2;
}

.modal-overlay {
  @apply fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50;
}

.modal-content {
  @apply bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4;
}

.modal-header {
  @apply flex items-center justify-between p-6 border-b;
}

.modal-title {
  @apply text-lg font-medium text-gray-900;
}

.modal-close {
  @apply text-gray-400 hover:text-gray-600 text-2xl font-bold;
}

.modal-body {
  @apply p-6;
}

.modal-footer {
  @apply flex items-center justify-end space-x-3 p-6 border-t bg-gray-50;
}

.btn {
  @apply px-4 py-2 rounded-md font-medium focus:outline-none focus:ring-2 focus:ring-offset-2;
}

.btn-primary {
  @apply bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500;
}

.btn-secondary {
  @apply bg-gray-200 text-gray-900 hover:bg-gray-300 focus:ring-gray-500;
}
</style>