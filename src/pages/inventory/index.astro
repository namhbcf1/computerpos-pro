---
import BaseLayout from '../../layouts/BaseLayout.astro';
import DashboardLayout from '../../layouts/DashboardLayout.astro';
import Card from '../../components/ui/Card.astro';
import Button from '../../components/ui/Button.astro';
---

<BaseLayout title="Quản lý tồn kho - ComputerPOS Pro">
  <DashboardLayout>
    <main class="p-6 space-y-6">
      <!-- Header -->
      <div class="flex justify-between items-center">
        <div>
          <h1 class="text-3xl font-bold text-gray-900">Quản lý tồn kho</h1>
          <p class="text-gray-600 mt-1">Theo dõi và quản lý tồn kho linh kiện máy tính</p>
        </div>
        <div class="flex space-x-3">
          <Button href="/inventory/import" variant="secondary">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10" />
            </svg>
            Nhập hàng
          </Button>
          <Button href="/inventory/export" variant="secondary">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            Xuất báo cáo
          </Button>
          <Button href="/inventory/adjustment" variant="primary">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4" />
            </svg>
            Kiểm kê
          </Button>
        </div>
      </div>

      <!-- Stats Cards -->
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card>
          <div class="p-6">
            <div class="flex items-center">
              <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mr-3">
                <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
                </svg>
              </div>
              <div>
                <p class="text-sm font-medium text-gray-600">Tổng sản phẩm</p>
                <p class="text-2xl font-bold text-gray-900" id="total-products">0</p>
              </div>
            </div>
          </div>
        </Card>

        <Card>
          <div class="p-6">
            <div class="flex items-center">
              <div class="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center mr-3">
                <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <div>
                <p class="text-sm font-medium text-gray-600">Có sẵn</p>
                <p class="text-2xl font-bold text-gray-900" id="available-products">0</p>
              </div>
            </div>
          </div>
        </Card>

        <Card>
          <div class="p-6">
            <div class="flex items-center">
              <div class="w-8 h-8 bg-yellow-100 rounded-full flex items-center justify-center mr-3">
                <svg class="w-5 h-5 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z" />
                </svg>
              </div>
              <div>
                <p class="text-sm font-medium text-gray-600">Sắp hết</p>
                <p class="text-2xl font-bold text-gray-900" id="low-stock-products">0</p>
              </div>
            </div>
          </div>
        </Card>

        <Card>
          <div class="p-6">
            <div class="flex items-center">
              <div class="w-8 h-8 bg-red-100 rounded-full flex items-center justify-center mr-3">
                <svg class="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </div>
              <div>
                <p class="text-sm font-medium text-gray-600">Hết hàng</p>
                <p class="text-2xl font-bold text-gray-900" id="out-of-stock-products">0</p>
              </div>
            </div>
          </div>
        </Card>
      </div>

      <!-- Filters and Search -->
      <Card>
        <div class="p-6">
          <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Tìm kiếm</label>
              <input 
                type="text" 
                id="search-input"
                class="form-input w-full"
                placeholder="Tìm theo tên, SKU, barcode..."
              />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Danh mục</label>
              <select id="category-filter" class="form-select w-full">
                <option value="">Tất cả danh mục</option>
                <option value="cpu">CPU - Bộ vi xử lý</option>
                <option value="motherboard">Mainboard - Bo mạch chủ</option>
                <option value="ram">RAM - Bộ nhớ</option>
                <option value="gpu">GPU - Card đồ họa</option>
                <option value="storage">Storage - Ổ cứng</option>
                <option value="psu">PSU - Nguồn máy tính</option>
                <option value="case">Case - Vỏ máy tính</option>
                <option value="cooling">Cooling - Tản nhiệt</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Trạng thái</label>
              <select id="status-filter" class="form-select w-full">
                <option value="">Tất cả trạng thái</option>
                <option value="available">Có sẵn</option>
                <option value="low_stock">Sắp hết</option>
                <option value="out_of_stock">Hết hàng</option>
                <option value="discontinued">Ngừng kinh doanh</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Thương hiệu</label>
              <select id="brand-filter" class="form-select w-full">
                <option value="">Tất cả thương hiệu</option>
                <option value="intel">Intel</option>
                <option value="amd">AMD</option>
                <option value="nvidia">NVIDIA</option>
                <option value="asus">ASUS</option>
                <option value="msi">MSI</option>
                <option value="corsair">Corsair</option>
                <option value="gskill">G.Skill</option>
              </select>
            </div>
          </div>
        </div>
      </Card>

      <!-- Quick Actions -->
      <div class="flex justify-between items-center">
        <div class="flex space-x-3">
          <Button variant="outline" size="sm" id="bulk-actions-btn">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
            </svg>
            Hành động hàng loạt
          </Button>
          <Button variant="outline" size="sm" id="export-selected-btn">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            Xuất đã chọn
          </Button>
        </div>
        <div class="flex items-center space-x-2">
          <span class="text-sm text-gray-500">Hiển thị</span>
          <select id="per-page-select" class="form-select text-sm">
            <option value="20">20</option>
            <option value="50">50</option>
            <option value="100">100</option>
          </select>
          <span class="text-sm text-gray-500">/ trang</span>
        </div>
      </div>

      <!-- Inventory Table -->
      <Card>
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  <input type="checkbox" id="select-all" class="form-checkbox">
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Sản phẩm
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  SKU/Barcode
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Danh mục
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Tồn kho
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Giá bán
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Giá trị tồn kho
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Trạng thái
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Thao tác
                </th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200" id="inventory-table-body">
              <!-- Data will be populated by JavaScript -->
            </tbody>
          </table>
        </div>
      </Card>

      <!-- Pagination -->
      <div class="flex items-center justify-between">
        <div class="text-sm text-gray-700">
          Hiển thị <span id="showing-from">1</span> đến <span id="showing-to">20</span> của <span id="total-records">0</span> sản phẩm
        </div>
        <div class="flex space-x-2" id="pagination-controls">
          <!-- Pagination buttons will be generated by JavaScript -->
        </div>
      </div>
    </main>

    <!-- Stock Alert Modal -->
    <div id="stock-alert-modal" class="modal-overlay hidden" data-modal="stock-alert">
      <div class="modal-content max-w-md">
        <div class="modal-header">
          <h3 class="modal-title">Cảnh báo tồn kho</h3>
          <button class="modal-close" data-modal-close>&times;</button>
        </div>
        <div class="modal-body">
          <div class="mb-4">
            <p class="text-sm text-gray-600">Sản phẩm có tồn kho thấp cần được nhập thêm:</p>
          </div>
          <div id="low-stock-list" class="space-y-2 max-h-60 overflow-y-auto">
            <!-- Low stock items will be populated here -->
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-modal-close>Đóng</button>
          <button type="button" class="btn btn-primary" onclick="createPurchaseOrder()">Tạo đơn nhập hàng</button>
        </div>
      </div>
    </div>

    <!-- Bulk Actions Modal -->
    <div id="bulk-actions-modal" class="modal-overlay hidden" data-modal="bulk-actions">
      <div class="modal-content max-w-md">
        <div class="modal-header">
          <h3 class="modal-title">Hành động hàng loạt</h3>
          <button class="modal-close" data-modal-close>&times;</button>
        </div>
        <div class="modal-body">
          <div class="space-y-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Chọn hành động</label>
              <select id="bulk-action-select" class="form-select w-full">
                <option value="">Chọn hành động...</option>
                <option value="update_price">Cập nhật giá</option>
                <option value="adjust_stock">Điều chỉnh tồn kho</option>
                <option value="change_category">Thay đổi danh mục</option>
                <option value="set_min_stock">Thiết lập tồn kho tối thiểu</option>
                <option value="deactivate">Ngừng kinh doanh</option>
              </select>
            </div>
            <div id="bulk-action-params" class="hidden">
              <!-- Parameters will be shown based on selected action -->
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-modal-close>Hủy</button>
          <button type="button" class="btn btn-primary" onclick="executeBulkAction()">Thực hiện</button>
        </div>
      </div>
    </div>
  </DashboardLayout>
</BaseLayout>

<script>
import { formatCurrency } from '../../lib/utils/currency';

// Simple inventory status formatter 
function formatInventoryStatus(quantity, reserved = 0, minStock = 0) {
  const available = quantity - reserved;
  
  if (available <= 0) {
    return {
      status: 'out_of_stock',
      text: 'Hết hàng',
      color: 'bg-red-100 text-red-800'
    };
  } else if (available <= minStock) {
    return {
      status: 'low_stock',
      text: `${available} sản phẩm`,
      color: 'bg-yellow-100 text-yellow-800'
    };
  } else if (reserved > 0) {
    return {
      status: 'reserved',
      text: `${available} có sẵn (${reserved} đã đặt)`,
      color: 'bg-blue-100 text-blue-800'
    };
  } else {
    return {
      status: 'in_stock',
      text: `${available} có sẵn`,
      color: 'bg-green-100 text-green-800'
    };
  }
}

document.addEventListener('DOMContentLoaded', function() {
  let inventoryData = [];
  let filteredData = [];
  let currentPage = 1;
  let perPage = 20;
  let selectedItems = new Set();

  // Initialize page
  loadInventoryData();
  setupEventListeners();

  function loadInventoryData() {
    // Mock data - in real app, this would come from API
    inventoryData = [
      {
        id: 1,
        sku: 'CPU-INTEL-i5-13400F',
        barcode: '8806194558598',
        name: 'Intel Core i5-13400F',
        category: 'cpu',
        categoryName: 'CPU',
        brand: 'Intel',
        quantity: 25,
        reserved: 2,
        minStock: 5,
        maxStock: 100,
        costPrice: 4200000,
        sellingPrice: 4690000,
        retailPrice: 4890000,
        location: 'A1-01',
        lastUpdated: '2024-01-15',
        status: 'active'
      },
      {
        id: 2,
        sku: 'VGA-NVIDIA-RTX4070-MSI',
        barcode: '4719072881958',
        name: 'MSI GeForce RTX 4070 GAMING X TRIO',
        category: 'gpu',
        categoryName: 'GPU',
        brand: 'MSI',
        quantity: 3,
        reserved: 1,
        minStock: 5,
        maxStock: 20,
        costPrice: 14490000,
        sellingPrice: 15990000,
        retailPrice: 16990000,
        location: 'B2-05',
        lastUpdated: '2024-01-14',
        status: 'active'
      },
      {
        id: 3,
        sku: 'RAM-CORSAIR-16GB-DDR4',
        barcode: '0843591070849',
        name: 'Corsair Vengeance LPX 16GB DDR4-3200',
        category: 'ram',
        categoryName: 'RAM',
        brand: 'Corsair',
        quantity: 0,
        reserved: 0,
        minStock: 10,
        maxStock: 50,
        costPrice: 1690000,
        sellingPrice: 1890000,
        retailPrice: 1990000,
        location: 'C1-03',
        lastUpdated: '2024-01-13',
        status: 'active'
      },
      {
        id: 4,
        sku: 'SSD-SAMSUNG-980-1TB',
        barcode: '8806092043439',
        name: 'Samsung 980 NVMe SSD 1TB',
        category: 'storage',
        categoryName: 'Storage',
        brand: 'Samsung',
        quantity: 40,
        reserved: 5,
        minStock: 15,
        maxStock: 100,
        costPrice: 1990000,
        sellingPrice: 2290000,
        retailPrice: 2490000,
        location: 'D1-02',
        lastUpdated: '2024-01-15',
        status: 'active'
      }
    ];

    filteredData = [...inventoryData];
    updateStats();
    renderTable();
    checkLowStock();
  }

  function setupEventListeners() {
    // Search
    document.getElementById('search-input').addEventListener('input', function() {
      applyFilters();
    });

    // Filters
    document.getElementById('category-filter').addEventListener('change', applyFilters);
    document.getElementById('status-filter').addEventListener('change', applyFilters);
    document.getElementById('brand-filter').addEventListener('change', applyFilters);

    // Per page
    document.getElementById('per-page-select').addEventListener('change', function() {
      perPage = parseInt(this.value);
      currentPage = 1;
      renderTable();
    });

    // Select all
    document.getElementById('select-all').addEventListener('change', function() {
      const checkboxes = document.querySelectorAll('.item-checkbox');
      checkboxes.forEach(checkbox => {
        checkbox.checked = this.checked;
        if (this.checked) {
          selectedItems.add(checkbox.dataset.id);
        } else {
          selectedItems.delete(checkbox.dataset.id);
        }
      });
      updateBulkActionsUI();
    });

    // Bulk actions
    document.getElementById('bulk-actions-btn').addEventListener('click', function() {
      if (selectedItems.size === 0) {
        alert('Vui lòng chọn ít nhất một sản phẩm');
        return;
      }
      document.getElementById('bulk-actions-modal').classList.remove('hidden');
    });

    document.getElementById('bulk-action-select').addEventListener('change', function() {
      showBulkActionParams(this.value);
    });
  }

  function applyFilters() {
    const searchTerm = document.getElementById('search-input').value.toLowerCase();
    const categoryFilter = document.getElementById('category-filter').value;
    const statusFilter = document.getElementById('status-filter').value;
    const brandFilter = document.getElementById('brand-filter').value;

    filteredData = inventoryData.filter(item => {
      const matchesSearch = !searchTerm || 
        item.name.toLowerCase().includes(searchTerm) ||
        item.sku.toLowerCase().includes(searchTerm) ||
        item.barcode.includes(searchTerm);

      const matchesCategory = !categoryFilter || item.category === categoryFilter;
      const matchesBrand = !brandFilter || item.brand.toLowerCase() === brandFilter;

      let matchesStatus = true;
      if (statusFilter) {
        const available = item.quantity - item.reserved;
        switch (statusFilter) {
          case 'available':
            matchesStatus = available > item.minStock;
            break;
          case 'low_stock':
            matchesStatus = available > 0 && available <= item.minStock;
            break;
          case 'out_of_stock':
            matchesStatus = available <= 0;
            break;
          case 'discontinued':
            matchesStatus = item.status === 'discontinued';
            break;
        }
      }

      return matchesSearch && matchesCategory && matchesBrand && matchesStatus;
    });

    currentPage = 1;
    updateStats();
    renderTable();
  }

  function updateStats() {
    const totalProducts = inventoryData.length;
    const availableProducts = inventoryData.filter(item => 
      (item.quantity - item.reserved) > item.minStock
    ).length;
    const lowStockProducts = inventoryData.filter(item => {
      const available = item.quantity - item.reserved;
      return available > 0 && available <= item.minStock;
    }).length;
    const outOfStockProducts = inventoryData.filter(item => 
      (item.quantity - item.reserved) <= 0
    ).length;

    document.getElementById('total-products').textContent = totalProducts;
    document.getElementById('available-products').textContent = availableProducts;
    document.getElementById('low-stock-products').textContent = lowStockProducts;
    document.getElementById('out-of-stock-products').textContent = outOfStockProducts;
  }

  function renderTable() {
    const start = (currentPage - 1) * perPage;
    const end = start + perPage;
    const pageData = filteredData.slice(start, end);

    const tbody = document.getElementById('inventory-table-body');
    tbody.innerHTML = '';

    pageData.forEach(item => {
      const row = createTableRow(item);
      tbody.appendChild(row);
    });

    updatePagination();
  }

  function createTableRow(item) {
    const row = document.createElement('tr');
    row.className = 'hover:bg-gray-50';

    const available = item.quantity - item.reserved;
    const inventoryStatus = formatInventoryStatus(item.quantity, item.reserved);
    const stockValue = item.quantity * item.costPrice;

    row.innerHTML = `
      <td class="px-6 py-4 whitespace-nowrap">
        <input type="checkbox" class="item-checkbox form-checkbox" data-id="${item.id}">
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="flex items-center">
          <div class="flex-shrink-0 h-10 w-10">
            <div class="h-10 w-10 rounded-lg bg-gray-200 flex items-center justify-center">
              <span class="text-xs font-medium text-gray-600">${item.categoryName}</span>
            </div>
          </div>
          <div class="ml-4">
            <div class="text-sm font-medium text-gray-900">${item.name}</div>
            <div class="text-sm text-gray-500">${item.brand}</div>
          </div>
        </div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="text-sm text-gray-900">${item.sku}</div>
        <div class="text-sm text-gray-500">${item.barcode}</div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <span class="px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 rounded-full">
          ${item.categoryName}
        </span>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="text-sm text-gray-900">${available} / ${item.quantity}</div>
        <div class="text-xs text-gray-500">${item.reserved} đặt trước</div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="text-sm font-medium text-gray-900">${formatCurrency(item.sellingPrice)}</div>
        <div class="text-xs text-gray-500">Vốn: ${formatCurrency(item.costPrice)}</div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="text-sm font-medium text-gray-900">${formatCurrency(stockValue)}</div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <span class="px-2 py-1 text-xs font-medium rounded-full bg-${inventoryStatus.color}-100 text-${inventoryStatus.color}-800">
          ${inventoryStatus.text}
        </span>
      </td>
      <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
        <button class="text-blue-600 hover:text-blue-900 mr-3" onclick="editItem(${item.id})">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
          </svg>
        </button>
        <button class="text-green-600 hover:text-green-900 mr-3" onclick="adjustStock(${item.id})">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4" />
          </svg>
        </button>
        <button class="text-red-600 hover:text-red-900" onclick="viewHistory(${item.id})">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </button>
      </td>
    `;

    // Add event listener for checkbox
    const checkbox = row.querySelector('.item-checkbox');
    checkbox.addEventListener('change', function() {
      if (this.checked) {
        selectedItems.add(this.dataset.id);
      } else {
        selectedItems.delete(this.dataset.id);
      }
      updateBulkActionsUI();
    });

    return row;
  }

  function updatePagination() {
    const totalPages = Math.ceil(filteredData.length / perPage);
    const showingFrom = (currentPage - 1) * perPage + 1;
    const showingTo = Math.min(currentPage * perPage, filteredData.length);

    document.getElementById('showing-from').textContent = showingFrom;
    document.getElementById('showing-to').textContent = showingTo;
    document.getElementById('total-records').textContent = filteredData.length;

    // Create pagination buttons
    const paginationControls = document.getElementById('pagination-controls');
    paginationControls.innerHTML = '';

    if (totalPages <= 1) return;

    // Previous button
    const prevBtn = document.createElement('button');
    prevBtn.className = `px-3 py-1 text-sm border rounded ${currentPage === 1 ? 'bg-gray-100 text-gray-400' : 'bg-white text-gray-700 hover:bg-gray-50'}`;
    prevBtn.textContent = 'Trước';
    prevBtn.disabled = currentPage === 1;
    prevBtn.onclick = () => {
      if (currentPage > 1) {
        currentPage--;
        renderTable();
      }
    };
    paginationControls.appendChild(prevBtn);

    // Page numbers
    for (let i = 1; i <= totalPages; i++) {
      if (i === 1 || i === totalPages || (i >= currentPage - 2 && i <= currentPage + 2)) {
        const pageBtn = document.createElement('button');
        pageBtn.className = `px-3 py-1 text-sm border rounded ${i === currentPage ? 'bg-blue-500 text-white' : 'bg-white text-gray-700 hover:bg-gray-50'}`;
        pageBtn.textContent = i;
        pageBtn.onclick = () => {
          currentPage = i;
          renderTable();
        };
        paginationControls.appendChild(pageBtn);
      } else if (i === currentPage - 3 || i === currentPage + 3) {
        const ellipsis = document.createElement('span');
        ellipsis.className = 'px-3 py-1 text-sm text-gray-500';
        ellipsis.textContent = '...';
        paginationControls.appendChild(ellipsis);
      }
    }

    // Next button
    const nextBtn = document.createElement('button');
    nextBtn.className = `px-3 py-1 text-sm border rounded ${currentPage === totalPages ? 'bg-gray-100 text-gray-400' : 'bg-white text-gray-700 hover:bg-gray-50'}`;
    nextBtn.textContent = 'Tiếp';
    nextBtn.disabled = currentPage === totalPages;
    nextBtn.onclick = () => {
      if (currentPage < totalPages) {
        currentPage++;
        renderTable();
      }
    };
    paginationControls.appendChild(nextBtn);
  }

  function updateBulkActionsUI() {
    const bulkBtn = document.getElementById('bulk-actions-btn');
    const exportBtn = document.getElementById('export-selected-btn');
    
    if (selectedItems.size > 0) {
      bulkBtn.textContent = `Hành động (${selectedItems.size})`;
      exportBtn.textContent = `Xuất (${selectedItems.size})`;
      bulkBtn.classList.remove('opacity-50');
      exportBtn.classList.remove('opacity-50');
    } else {
      bulkBtn.textContent = 'Hành động hàng loạt';
      exportBtn.textContent = 'Xuất đã chọn';
      bulkBtn.classList.add('opacity-50');
      exportBtn.classList.add('opacity-50');
    }
  }

  function checkLowStock() {
    const lowStockItems = inventoryData.filter(item => {
      const available = item.quantity - item.reserved;
      return available > 0 && available <= item.minStock;
    });

    if (lowStockItems.length > 0) {
      // Auto-show alert after 2 seconds
      setTimeout(() => {
        showLowStockAlert(lowStockItems);
      }, 2000);
    }
  }

  function showLowStockAlert(items) {
    const listEl = document.getElementById('low-stock-list');
    listEl.innerHTML = '';

    items.forEach(item => {
      const div = document.createElement('div');
      div.className = 'flex items-center justify-between p-3 bg-yellow-50 rounded-lg';
      div.innerHTML = `
        <div>
          <div class="font-medium text-yellow-900">${item.name}</div>
          <div class="text-sm text-yellow-700">Còn ${item.quantity - item.reserved} / Tối thiểu ${item.minStock}</div>
        </div>
        <span class="text-yellow-600 font-medium">${formatCurrency(item.sellingPrice)}</span>
      `;
      listEl.appendChild(div);
    });

    document.getElementById('stock-alert-modal').classList.remove('hidden');
  }

  function showBulkActionParams(action) {
    const paramsEl = document.getElementById('bulk-action-params');
    paramsEl.innerHTML = '';

    if (!action) {
      paramsEl.classList.add('hidden');
      return;
    }

    paramsEl.classList.remove('hidden');

    switch (action) {
      case 'update_price':
        paramsEl.innerHTML = `
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Loại giá</label>
            <select id="price-type" class="form-select w-full mb-3">
              <option value="selling">Giá bán</option>
              <option value="cost">Giá vốn</option>
              <option value="retail">Giá lẻ</option>
            </select>
            <label class="block text-sm font-medium text-gray-700 mb-2">Giá mới (VND)</label>
            <input type="number" id="new-price" class="form-input w-full" placeholder="Nhập giá mới">
          </div>
        `;
        break;
      case 'adjust_stock':
        paramsEl.innerHTML = `
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Loại điều chỉnh</label>
            <select id="adjustment-type" class="form-select w-full mb-3">
              <option value="add">Thêm vào</option>
              <option value="subtract">Trừ đi</option>
              <option value="set">Đặt thành</option>
            </select>
            <label class="block text-sm font-medium text-gray-700 mb-2">Số lượng</label>
            <input type="number" id="adjustment-quantity" class="form-input w-full" placeholder="Nhập số lượng">
          </div>
        `;
        break;
      case 'set_min_stock':
        paramsEl.innerHTML = `
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Tồn kho tối thiểu</label>
            <input type="number" id="min-stock-value" class="form-input w-full" placeholder="Nhập số lượng tối thiểu">
          </div>
        `;
        break;
    }
  }

  // Global functions for onclick handlers
  window.editItem = function(id) {
    window.location.href = `/inventory/edit/${id}`;
  };

  window.adjustStock = function(id) {
    window.location.href = `/inventory/adjust/${id}`;
  };

  window.viewHistory = function(id) {
    window.location.href = `/inventory/history/${id}`;
  };

  window.createPurchaseOrder = function() {
    window.location.href = '/inventory/purchase-order';
  };

  window.executeBulkAction = function() {
    const action = document.getElementById('bulk-action-select').value;
    if (!action) {
      alert('Vui lòng chọn hành động');
      return;
    }

    // This would normally send to API
    console.log('Executing bulk action:', action, 'on items:', Array.from(selectedItems));
    alert(`Đã thực hiện hành động "${action}" trên ${selectedItems.size} sản phẩm`);
    
    // Close modal and reset
    document.getElementById('bulk-actions-modal').classList.add('hidden');
    selectedItems.clear();
    updateBulkActionsUI();
    
    // Refresh data
    loadInventoryData();
  };
});
</script>

<style>
.form-input, .form-select {
  @apply px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500;
}

.form-checkbox {
  @apply text-blue-600 border-gray-300 rounded focus:ring-blue-500 focus:ring-2;
}

.modal-overlay {
  @apply fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50;
}

.modal-content {
  @apply bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4;
}

.modal-header {
  @apply flex items-center justify-between p-6 border-b;
}

.modal-title {
  @apply text-lg font-medium text-gray-900;
}

.modal-close {
  @apply text-gray-400 hover:text-gray-600 text-2xl font-bold;
}

.modal-body {
  @apply p-6;
}

.modal-footer {
  @apply flex items-center justify-end space-x-3 p-6 border-t bg-gray-50;
}

.btn {
  @apply px-4 py-2 rounded-md font-medium focus:outline-none focus:ring-2 focus:ring-offset-2;
}

.btn-primary {
  @apply bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500;
}

.btn-secondary {
  @apply bg-gray-200 text-gray-900 hover:bg-gray-300 focus:ring-gray-500;
}
</style>